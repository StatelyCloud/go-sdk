// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: db/scan.proto

package db

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BeginScanRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// store_id is a globally unique Store ID, which can be looked up from the
	// console or CLI.
	StoreId uint64 `protobuf:"varint,1,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty"`
	// filter_conditions is a set of conditions to filter the scan result by.
	// If no conditions are provided, all items in the store will be returned.
	// Filter conditions are combined with OR.
	FilterConditions []*FilterCondition `protobuf:"bytes,2,rep,name=filter_conditions,json=filterConditions,proto3" json:"filter_conditions,omitempty"`
	// limit is the maximum number of items to return. If this is not specified or
	// set to 0, it will return one server side page of items, which may contain zero of your selected
	// item types and hence be an empty response.
	// Be sure to check token.can_continue to see if you have more items left to fetch.
	Limit uint32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// segmentation_params is used to enable parallelization of the list operation.
	// This is useful for bulk processing of large stores.
	// If this field is set then the list operation will be split into segment_params.total_segments
	// and this request will process the segment defined in segmentation_params.segment_index.
	// See SegmentationParams for more details.
	// Please be warned that parallelization will result on increase throughput to your store
	// which may result in throttling.
	SegmentationParams *SegmentationParams `protobuf:"bytes,4,opt,name=segmentation_params,json=segmentationParams,proto3" json:"segmentation_params,omitempty"`
	// schema_version_id is the version of the store's schema to use to interpret
	// items. If there is no version with this ID, the operation will error with
	// SchemaVersionNotFound error. You should not have to set this manually as
	// your generated SDK should know its schema version and wire this in for you.
	SchemaVersionId uint32 `protobuf:"varint,5,opt,name=schema_version_id,json=schemaVersionId,proto3" json:"schema_version_id,omitempty"`
	// schema_id refers to the schema to use for this operation.
	// If the store_id does not have a schema with this ID, the operation will
	// error with SchemaNotFound error. You should not have to set this manually
	// as your generated SDK should know its schema and wire this in for you.
	SchemaId      uint64 `protobuf:"varint,6,opt,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty"` // [(buf.validate.field).required = true]; (after clients have been regen'd and updated)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BeginScanRequest) Reset() {
	*x = BeginScanRequest{}
	mi := &file_db_scan_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BeginScanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeginScanRequest) ProtoMessage() {}

func (x *BeginScanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_db_scan_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeginScanRequest.ProtoReflect.Descriptor instead.
func (*BeginScanRequest) Descriptor() ([]byte, []int) {
	return file_db_scan_proto_rawDescGZIP(), []int{0}
}

func (x *BeginScanRequest) GetStoreId() uint64 {
	if x != nil {
		return x.StoreId
	}
	return 0
}

func (x *BeginScanRequest) GetFilterConditions() []*FilterCondition {
	if x != nil {
		return x.FilterConditions
	}
	return nil
}

func (x *BeginScanRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *BeginScanRequest) GetSegmentationParams() *SegmentationParams {
	if x != nil {
		return x.SegmentationParams
	}
	return nil
}

func (x *BeginScanRequest) GetSchemaVersionId() uint32 {
	if x != nil {
		return x.SchemaVersionId
	}
	return 0
}

func (x *BeginScanRequest) GetSchemaId() uint64 {
	if x != nil {
		return x.SchemaId
	}
	return 0
}

type SegmentationParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// total_segments is used to determine the number of segments the store will be split into.
	// The segment_index field will then be used to determine which segment to process.
	// For example, if total_segments is set to 5 then the store will be split into 5 segments
	// and by setting segment_index to 0, 1, 2, 3, or 4 the request will process the corresponding
	// segment.
	TotalSegments uint32 `protobuf:"varint,5,opt,name=total_segments,json=totalSegments,proto3" json:"total_segments,omitempty"`
	// segment_index is used to determine which segment of the store to process
	// with this request.
	// Segments are zero-indexed so the value of segment_index must be less than total_segments.
	SegmentIndex  uint32 `protobuf:"varint,6,opt,name=segment_index,json=segmentIndex,proto3" json:"segment_index,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SegmentationParams) Reset() {
	*x = SegmentationParams{}
	mi := &file_db_scan_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SegmentationParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentationParams) ProtoMessage() {}

func (x *SegmentationParams) ProtoReflect() protoreflect.Message {
	mi := &file_db_scan_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentationParams.ProtoReflect.Descriptor instead.
func (*SegmentationParams) Descriptor() ([]byte, []int) {
	return file_db_scan_proto_rawDescGZIP(), []int{1}
}

func (x *SegmentationParams) GetTotalSegments() uint32 {
	if x != nil {
		return x.TotalSegments
	}
	return 0
}

func (x *SegmentationParams) GetSegmentIndex() uint32 {
	if x != nil {
		return x.SegmentIndex
	}
	return 0
}

var File_db_scan_proto protoreflect.FileDescriptor

const file_db_scan_proto_rawDesc = "" +
	"\n" +
	"\rdb/scan.proto\x12\n" +
	"stately.db\x1a\x1bbuf/validate/validate.proto\x1a\x15db/list_filters.proto\"\xb7\x02\n" +
	"\x10BeginScanRequest\x12!\n" +
	"\bstore_id\x18\x01 \x01(\x04B\x06\xbaH\x03\xc8\x01\x01R\astoreId\x12H\n" +
	"\x11filter_conditions\x18\x02 \x03(\v2\x1b.stately.db.FilterConditionR\x10filterConditions\x12\x14\n" +
	"\x05limit\x18\x03 \x01(\rR\x05limit\x12O\n" +
	"\x13segmentation_params\x18\x04 \x01(\v2\x1e.stately.db.SegmentationParamsR\x12segmentationParams\x122\n" +
	"\x11schema_version_id\x18\x05 \x01(\rB\x06\xbaH\x03\xc8\x01\x01R\x0fschemaVersionId\x12\x1b\n" +
	"\tschema_id\x18\x06 \x01(\x04R\bschemaId\"\xdb\x01\n" +
	"\x12SegmentationParams\x122\n" +
	"\x0etotal_segments\x18\x05 \x01(\rB\v\xbaH\b*\x06\x18\xc0\x84=(\x01R\rtotalSegments\x12#\n" +
	"\rsegment_index\x18\x06 \x01(\rR\fsegmentIndex:l\xbaHi\x1ag\n" +
	"\vvalid_index\x12.segment_index must be less than total_segments\x1a(this.segment_index < this.total_segmentsB\x8a\x01\n" +
	"\x0ecom.stately.dbB\tScanProtoP\x01Z$github.com/StatelyCloud/go-sdk/pb/db\xa2\x02\x03SDX\xaa\x02\n" +
	"Stately.Db\xca\x02\n" +
	"Stately\\Db\xe2\x02\x16Stately\\Db\\GPBMetadata\xea\x02\vStately::Dbb\x06proto3"

var (
	file_db_scan_proto_rawDescOnce sync.Once
	file_db_scan_proto_rawDescData []byte
)

func file_db_scan_proto_rawDescGZIP() []byte {
	file_db_scan_proto_rawDescOnce.Do(func() {
		file_db_scan_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_db_scan_proto_rawDesc), len(file_db_scan_proto_rawDesc)))
	})
	return file_db_scan_proto_rawDescData
}

var file_db_scan_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_db_scan_proto_goTypes = []any{
	(*BeginScanRequest)(nil),   // 0: stately.db.BeginScanRequest
	(*SegmentationParams)(nil), // 1: stately.db.SegmentationParams
	(*FilterCondition)(nil),    // 2: stately.db.FilterCondition
}
var file_db_scan_proto_depIdxs = []int32{
	2, // 0: stately.db.BeginScanRequest.filter_conditions:type_name -> stately.db.FilterCondition
	1, // 1: stately.db.BeginScanRequest.segmentation_params:type_name -> stately.db.SegmentationParams
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_db_scan_proto_init() }
func file_db_scan_proto_init() {
	if File_db_scan_proto != nil {
		return
	}
	file_db_list_filters_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_db_scan_proto_rawDesc), len(file_db_scan_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_db_scan_proto_goTypes,
		DependencyIndexes: file_db_scan_proto_depIdxs,
		MessageInfos:      file_db_scan_proto_msgTypes,
	}.Build()
	File_db_scan_proto = out.File
	file_db_scan_proto_goTypes = nil
	file_db_scan_proto_depIdxs = nil
}
