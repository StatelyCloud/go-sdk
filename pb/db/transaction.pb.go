// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: db/transaction.proto

package db

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a streaming request, so the client may send several of them
type TransactionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// message_id should be set to a unique number per request in this
	// transaction. It will be returned with responses to make it easier to match
	// up specific responses with their requests.
	MessageId uint32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// Types that are valid to be assigned to Command:
	//
	//	*TransactionRequest_Begin
	//	*TransactionRequest_GetItems
	//	*TransactionRequest_BeginList
	//	*TransactionRequest_ContinueList
	//	*TransactionRequest_PutItems
	//	*TransactionRequest_DeleteItems
	//	*TransactionRequest_Commit
	//	*TransactionRequest_Abort
	Command       isTransactionRequest_Command `protobuf_oneof:"command"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionRequest) Reset() {
	*x = TransactionRequest{}
	mi := &file_db_transaction_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionRequest) ProtoMessage() {}

func (x *TransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_db_transaction_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionRequest.ProtoReflect.Descriptor instead.
func (*TransactionRequest) Descriptor() ([]byte, []int) {
	return file_db_transaction_proto_rawDescGZIP(), []int{0}
}

func (x *TransactionRequest) GetMessageId() uint32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *TransactionRequest) GetCommand() isTransactionRequest_Command {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *TransactionRequest) GetBegin() *TransactionBegin {
	if x != nil {
		if x, ok := x.Command.(*TransactionRequest_Begin); ok {
			return x.Begin
		}
	}
	return nil
}

func (x *TransactionRequest) GetGetItems() *TransactionGet {
	if x != nil {
		if x, ok := x.Command.(*TransactionRequest_GetItems); ok {
			return x.GetItems
		}
	}
	return nil
}

func (x *TransactionRequest) GetBeginList() *TransactionBeginList {
	if x != nil {
		if x, ok := x.Command.(*TransactionRequest_BeginList); ok {
			return x.BeginList
		}
	}
	return nil
}

func (x *TransactionRequest) GetContinueList() *TransactionContinueList {
	if x != nil {
		if x, ok := x.Command.(*TransactionRequest_ContinueList); ok {
			return x.ContinueList
		}
	}
	return nil
}

func (x *TransactionRequest) GetPutItems() *TransactionPut {
	if x != nil {
		if x, ok := x.Command.(*TransactionRequest_PutItems); ok {
			return x.PutItems
		}
	}
	return nil
}

func (x *TransactionRequest) GetDeleteItems() *TransactionDelete {
	if x != nil {
		if x, ok := x.Command.(*TransactionRequest_DeleteItems); ok {
			return x.DeleteItems
		}
	}
	return nil
}

func (x *TransactionRequest) GetCommit() *emptypb.Empty {
	if x != nil {
		if x, ok := x.Command.(*TransactionRequest_Commit); ok {
			return x.Commit
		}
	}
	return nil
}

func (x *TransactionRequest) GetAbort() *emptypb.Empty {
	if x != nil {
		if x, ok := x.Command.(*TransactionRequest_Abort); ok {
			return x.Abort
		}
	}
	return nil
}

type isTransactionRequest_Command interface {
	isTransactionRequest_Command()
}

type TransactionRequest_Begin struct {
	// begin sets up options for the transaction, such as what store we're
	// operating on. It is not acknowledged unless there is an error, which
	// kills the whole transaction.
	Begin *TransactionBegin `protobuf:"bytes,2,opt,name=begin,proto3,oneof"`
}

type TransactionRequest_GetItems struct {
	// The client is requesting to get one or more items. The results will be
	// returned in TransactionResponse#get_results.
	GetItems *TransactionGet `protobuf:"bytes,3,opt,name=get_items,json=getItems,proto3,oneof"`
}

type TransactionRequest_BeginList struct {
	// The client is requesting a list of a path prefix. The results will be
	// returned in TransactionResponse#list.
	BeginList *TransactionBeginList `protobuf:"bytes,4,opt,name=begin_list,json=beginList,proto3,oneof"`
}

type TransactionRequest_ContinueList struct {
	// ContinueList takes the token from a BeginList call and returns the next
	// "page" of results based on the original query parameters and pagination
	// options. It has few options because it is a continuation of a previous
	// list operation. It will return a new  token which can be used for
	// another ContinueList call, and so on. Each time you call either
	// ContinueList, you should pass the latest version of the token, and then
	// use the new token from the result in subsequent calls. Calls to
	// ContinueList are tied to the authorization of the original BeginList
	// call, so if the original BeginList call was allowed, ContinueList with
	// its token should also be allowed.
	ContinueList *TransactionContinueList `protobuf:"bytes,5,opt,name=continue_list,json=continueList,proto3,oneof"`
}

type TransactionRequest_PutItems struct {
	// The client is requesting to create new items. This is acknowledged in
	// TransactionResponse#put_ack which contains the item's tentative full path
	// (pending the transaction's commit). The final result of all puts will be
	// returned in TransactionFinished#put_results.
	PutItems *TransactionPut `protobuf:"bytes,6,opt,name=put_items,json=putItems,proto3,oneof"`
}

type TransactionRequest_DeleteItems struct {
	// The client is requesting to delete items. It is not acknowledged unless
	// there is an error, which kills the whole transaction. The final result of
	// all deletes will be returned in TransactionFinished#delete_results.
	DeleteItems *TransactionDelete `protobuf:"bytes,7,opt,name=delete_items,json=deleteItems,proto3,oneof"`
}

type TransactionRequest_Commit struct {
	// The client is requesting to commit the transaction. The final results of
	// the transaction will be returned in TransactionResponse#finished.
	Commit *emptypb.Empty `protobuf:"bytes,8,opt,name=commit,proto3,oneof"`
}

type TransactionRequest_Abort struct {
	// The client is requesting to abort/rollback the transaction.
	Abort *emptypb.Empty `protobuf:"bytes,9,opt,name=abort,proto3,oneof"`
}

func (*TransactionRequest_Begin) isTransactionRequest_Command() {}

func (*TransactionRequest_GetItems) isTransactionRequest_Command() {}

func (*TransactionRequest_BeginList) isTransactionRequest_Command() {}

func (*TransactionRequest_ContinueList) isTransactionRequest_Command() {}

func (*TransactionRequest_PutItems) isTransactionRequest_Command() {}

func (*TransactionRequest_DeleteItems) isTransactionRequest_Command() {}

func (*TransactionRequest_Commit) isTransactionRequest_Command() {}

func (*TransactionRequest_Abort) isTransactionRequest_Command() {}

// This is a streaming response, so the server may send several of them
type TransactionResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// message_id is the same as the message_id of the request that triggered this
	// response. This makes it easier to distinguish between multiple responses to
	// different requests..
	MessageId uint32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// Types that are valid to be assigned to Result:
	//
	//	*TransactionResponse_GetResults
	//	*TransactionResponse_PutAck
	//	*TransactionResponse_ListResults
	//	*TransactionResponse_Finished
	Result        isTransactionResponse_Result `protobuf_oneof:"result"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionResponse) Reset() {
	*x = TransactionResponse{}
	mi := &file_db_transaction_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionResponse) ProtoMessage() {}

func (x *TransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_db_transaction_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionResponse.ProtoReflect.Descriptor instead.
func (*TransactionResponse) Descriptor() ([]byte, []int) {
	return file_db_transaction_proto_rawDescGZIP(), []int{1}
}

func (x *TransactionResponse) GetMessageId() uint32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *TransactionResponse) GetResult() isTransactionResponse_Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *TransactionResponse) GetGetResults() *TransactionGetResponse {
	if x != nil {
		if x, ok := x.Result.(*TransactionResponse_GetResults); ok {
			return x.GetResults
		}
	}
	return nil
}

func (x *TransactionResponse) GetPutAck() *TransactionPutAck {
	if x != nil {
		if x, ok := x.Result.(*TransactionResponse_PutAck); ok {
			return x.PutAck
		}
	}
	return nil
}

func (x *TransactionResponse) GetListResults() *TransactionListResponse {
	if x != nil {
		if x, ok := x.Result.(*TransactionResponse_ListResults); ok {
			return x.ListResults
		}
	}
	return nil
}

func (x *TransactionResponse) GetFinished() *TransactionFinished {
	if x != nil {
		if x, ok := x.Result.(*TransactionResponse_Finished); ok {
			return x.Finished
		}
	}
	return nil
}

type isTransactionResponse_Result interface {
	isTransactionResponse_Result()
}

type TransactionResponse_GetResults struct {
	// The server is responding to a GetItem request
	GetResults *TransactionGetResponse `protobuf:"bytes,2,opt,name=get_results,json=getResults,proto3,oneof"`
}

type TransactionResponse_PutAck struct {
	// put_ack contains provisionally updated items from a put, including
	// tentative IDs (pending transaction commit).
	PutAck *TransactionPutAck `protobuf:"bytes,3,opt,name=put_ack,json=putAck,proto3,oneof"`
}

type TransactionResponse_ListResults struct {
	// list_results is the result of a list request.
	ListResults *TransactionListResponse `protobuf:"bytes,4,opt,name=list_results,json=listResults,proto3,oneof"`
}

type TransactionResponse_Finished struct {
	// Final information about the transaction, regardless of whether it was committed or aborted.
	Finished *TransactionFinished `protobuf:"bytes,5,opt,name=finished,proto3,oneof"`
}

func (*TransactionResponse_GetResults) isTransactionResponse_Result() {}

func (*TransactionResponse_PutAck) isTransactionResponse_Result() {}

func (*TransactionResponse_ListResults) isTransactionResponse_Result() {}

func (*TransactionResponse_Finished) isTransactionResponse_Result() {}

// TransactionBegin opens a transaction and sets various options that will be
// used throughout the transaction.
type TransactionBegin struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// store_id is a globally unique Store ID, which can be looked up from the
	// console or CLI.
	StoreId uint64 `protobuf:"varint,1,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty"`
	// schema_version_id refers to the item version to base this txn from. All items
	// created or modified in this transaction will be based on this schema
	// version.
	//
	// If the store's schema does not have this version, the operation
	// will error with SchemaVersionNotFound error. You should not have to
	// set this manually as your generated SDK should know its schema version
	// and wire this in for you.
	SchemaVersionId uint32 `protobuf:"varint,2,opt,name=schema_version_id,json=schemaVersionId,proto3" json:"schema_version_id,omitempty"`
	// schema_id refers to the schema to use for this operation.
	// If the store_id does not have a schema with this ID, the operation will
	// error with SchemaNotFound error. You should not have to set this manually
	// as your generated SDK should know its schema and wire this in for you.
	SchemaId      uint64 `protobuf:"varint,3,opt,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty"` // [(buf.validate.field).required = true]; (after clients have been regen'd and updated)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionBegin) Reset() {
	*x = TransactionBegin{}
	mi := &file_db_transaction_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionBegin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionBegin) ProtoMessage() {}

func (x *TransactionBegin) ProtoReflect() protoreflect.Message {
	mi := &file_db_transaction_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionBegin.ProtoReflect.Descriptor instead.
func (*TransactionBegin) Descriptor() ([]byte, []int) {
	return file_db_transaction_proto_rawDescGZIP(), []int{2}
}

func (x *TransactionBegin) GetStoreId() uint64 {
	if x != nil {
		return x.StoreId
	}
	return 0
}

func (x *TransactionBegin) GetSchemaVersionId() uint32 {
	if x != nil {
		return x.SchemaVersionId
	}
	return 0
}

func (x *TransactionBegin) GetSchemaId() uint64 {
	if x != nil {
		return x.SchemaId
	}
	return 0
}

// TransactionGet is a subset of the GetRequest message, for performing point
// gets within the context of a transaction.
type TransactionGet struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// key paths to of each item to get.
	Gets          []*GetItem `protobuf:"bytes,1,rep,name=gets,proto3" json:"gets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionGet) Reset() {
	*x = TransactionGet{}
	mi := &file_db_transaction_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionGet) ProtoMessage() {}

func (x *TransactionGet) ProtoReflect() protoreflect.Message {
	mi := &file_db_transaction_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionGet.ProtoReflect.Descriptor instead.
func (*TransactionGet) Descriptor() ([]byte, []int) {
	return file_db_transaction_proto_rawDescGZIP(), []int{3}
}

func (x *TransactionGet) GetGets() []*GetItem {
	if x != nil {
		return x.Gets
	}
	return nil
}

// TransactionBeginList is a subset of the ListRequest message, for listing within
// the context of a transaction.
type TransactionBeginList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// key_path_prefix is the a prefix that limits what items we will return. This
	// must contain at least a root segment. See Item#key_path for more details.
	KeyPathPrefix string `protobuf:"bytes,1,opt,name=key_path_prefix,json=keyPathPrefix,proto3" json:"key_path_prefix,omitempty"`
	// limit is the maximum number of items to return. If this is not specified or
	// set to 0, it will be unlimited. Fewer items than the limit may be
	// returned even if there are more items to get - make sure to check
	// token.can_continue.
	Limit uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// sort_property is the property of the item to sort the results by. If this
	// is not set, we will sort by key path.
	SortProperty SortableProperty `protobuf:"varint,3,opt,name=sort_property,json=sortProperty,proto3,enum=stately.db.SortableProperty" json:"sort_property,omitempty"`
	// sort_direction is the direction to sort the results in. If this is not set,
	// we will sort in ascending order.
	SortDirection SortDirection `protobuf:"varint,4,opt,name=sort_direction,json=sortDirection,proto3,enum=stately.db.SortDirection" json:"sort_direction,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionBeginList) Reset() {
	*x = TransactionBeginList{}
	mi := &file_db_transaction_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionBeginList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionBeginList) ProtoMessage() {}

func (x *TransactionBeginList) ProtoReflect() protoreflect.Message {
	mi := &file_db_transaction_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionBeginList.ProtoReflect.Descriptor instead.
func (*TransactionBeginList) Descriptor() ([]byte, []int) {
	return file_db_transaction_proto_rawDescGZIP(), []int{4}
}

func (x *TransactionBeginList) GetKeyPathPrefix() string {
	if x != nil {
		return x.KeyPathPrefix
	}
	return ""
}

func (x *TransactionBeginList) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TransactionBeginList) GetSortProperty() SortableProperty {
	if x != nil {
		return x.SortProperty
	}
	return SortableProperty_SORTABLE_PROPERTY_KEY_PATH
}

func (x *TransactionBeginList) GetSortDirection() SortDirection {
	if x != nil {
		return x.SortDirection
	}
	return SortDirection_SORT_ASCENDING
}

type TransactionContinueList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// token is an opaque list continuation token returned by a previous call to
	// TransactionBeginList or TransactionContinueList.
	TokenData []byte `protobuf:"bytes,1,opt,name=token_data,json=tokenData,proto3" json:"token_data,omitempty"`
	// direction indicates whether we are expanding the result set (paginating)
	// forward (in the direction of the original List operation) or backward (in
	// the opposite direction). The default is to expand forward.
	Direction     ContinueListDirection `protobuf:"varint,4,opt,name=direction,proto3,enum=stately.db.ContinueListDirection" json:"direction,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionContinueList) Reset() {
	*x = TransactionContinueList{}
	mi := &file_db_transaction_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionContinueList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionContinueList) ProtoMessage() {}

func (x *TransactionContinueList) ProtoReflect() protoreflect.Message {
	mi := &file_db_transaction_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionContinueList.ProtoReflect.Descriptor instead.
func (*TransactionContinueList) Descriptor() ([]byte, []int) {
	return file_db_transaction_proto_rawDescGZIP(), []int{5}
}

func (x *TransactionContinueList) GetTokenData() []byte {
	if x != nil {
		return x.TokenData
	}
	return nil
}

func (x *TransactionContinueList) GetDirection() ContinueListDirection {
	if x != nil {
		return x.Direction
	}
	return ContinueListDirection_CONTINUE_LIST_FORWARD
}

// TransactionPut is a subset of the PutRequest message, for performing puts
// within the context of a transaction. These will not be acknowledged until the
// transaction is finished.
type TransactionPut struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// items to put into the store.
	Puts          []*PutItem `protobuf:"bytes,1,rep,name=puts,proto3" json:"puts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionPut) Reset() {
	*x = TransactionPut{}
	mi := &file_db_transaction_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionPut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionPut) ProtoMessage() {}

func (x *TransactionPut) ProtoReflect() protoreflect.Message {
	mi := &file_db_transaction_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionPut.ProtoReflect.Descriptor instead.
func (*TransactionPut) Descriptor() ([]byte, []int) {
	return file_db_transaction_proto_rawDescGZIP(), []int{6}
}

func (x *TransactionPut) GetPuts() []*PutItem {
	if x != nil {
		return x.Puts
	}
	return nil
}

// TransactionDelete is a subset of the DeleteRequest message, for performing
// deletes within the context of a transaction. These will not be acknowledged
// until the transaction is finished.
type TransactionDelete struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// key paths of items to delete.
	Deletes       []*DeleteItem `protobuf:"bytes,1,rep,name=deletes,proto3" json:"deletes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionDelete) Reset() {
	*x = TransactionDelete{}
	mi := &file_db_transaction_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionDelete) ProtoMessage() {}

func (x *TransactionDelete) ProtoReflect() protoreflect.Message {
	mi := &file_db_transaction_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionDelete.ProtoReflect.Descriptor instead.
func (*TransactionDelete) Descriptor() ([]byte, []int) {
	return file_db_transaction_proto_rawDescGZIP(), []int{7}
}

func (x *TransactionDelete) GetDeletes() []*DeleteItem {
	if x != nil {
		return x.Deletes
	}
	return nil
}

// TransactionGetResponse is a subset of the GetResponse message, for
// returning results during the execution of a transaction.
type TransactionGetResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// items is a list that contains one entry for each Item that was found.
	Items         []*Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionGetResponse) Reset() {
	*x = TransactionGetResponse{}
	mi := &file_db_transaction_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionGetResponse) ProtoMessage() {}

func (x *TransactionGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_db_transaction_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionGetResponse.ProtoReflect.Descriptor instead.
func (*TransactionGetResponse) Descriptor() ([]byte, []int) {
	return file_db_transaction_proto_rawDescGZIP(), []int{8}
}

func (x *TransactionGetResponse) GetItems() []*Item {
	if x != nil {
		return x.Items
	}
	return nil
}

// GeneratedID represents a unique ID that was generated by the server for a new item.
type GeneratedID struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Right now we only ever generate uint or bytes values from our id generators
	// (initialValue). If neither is set, this represents a put that didn't
	// generate any ID (e.g. it was fully specified in the input).
	//
	// Types that are valid to be assigned to Value:
	//
	//	*GeneratedID_Uint
	//	*GeneratedID_Bytes
	Value         isGeneratedID_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GeneratedID) Reset() {
	*x = GeneratedID{}
	mi := &file_db_transaction_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GeneratedID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneratedID) ProtoMessage() {}

func (x *GeneratedID) ProtoReflect() protoreflect.Message {
	mi := &file_db_transaction_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneratedID.ProtoReflect.Descriptor instead.
func (*GeneratedID) Descriptor() ([]byte, []int) {
	return file_db_transaction_proto_rawDescGZIP(), []int{9}
}

func (x *GeneratedID) GetValue() isGeneratedID_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *GeneratedID) GetUint() uint64 {
	if x != nil {
		if x, ok := x.Value.(*GeneratedID_Uint); ok {
			return x.Uint
		}
	}
	return 0
}

func (x *GeneratedID) GetBytes() []byte {
	if x != nil {
		if x, ok := x.Value.(*GeneratedID_Bytes); ok {
			return x.Bytes
		}
	}
	return nil
}

type isGeneratedID_Value interface {
	isGeneratedID_Value()
}

type GeneratedID_Uint struct {
	Uint uint64 `protobuf:"varint,1,opt,name=uint,proto3,oneof"`
}

type GeneratedID_Bytes struct {
	Bytes []byte `protobuf:"bytes,2,opt,name=bytes,proto3,oneof"`
}

func (*GeneratedID_Uint) isGeneratedID_Value() {}

func (*GeneratedID_Bytes) isGeneratedID_Value() {}

type TransactionPutAck struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// generated_ids is a list of generated identifiers for the items in a
	// TransactionPut. IDs are returned in the same order of the PutItems provided
	// in TransactionPut#puts. For each item where an ID was chosen via its
	// "initialValue" property, the chosen value is represented in the returned
	// GeneratedID. There is only at most one generated ID per Put, because we
	// only allow a single ID property to be generated per item. If the Put didn't
	// need any generated IDs, the GeneratedID in its position will be empty.
	//
	// Clients can use these IDs in subsequent Put operations (e.g. to insert
	// child or related items). If the transaction is aborted, the item(s) will
	// not be added and other item(s) could be created with the same IDs.
	GeneratedIds  []*GeneratedID `protobuf:"bytes,1,rep,name=generated_ids,json=generatedIds,proto3" json:"generated_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionPutAck) Reset() {
	*x = TransactionPutAck{}
	mi := &file_db_transaction_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionPutAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionPutAck) ProtoMessage() {}

func (x *TransactionPutAck) ProtoReflect() protoreflect.Message {
	mi := &file_db_transaction_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionPutAck.ProtoReflect.Descriptor instead.
func (*TransactionPutAck) Descriptor() ([]byte, []int) {
	return file_db_transaction_proto_rawDescGZIP(), []int{10}
}

func (x *TransactionPutAck) GetGeneratedIds() []*GeneratedID {
	if x != nil {
		return x.GeneratedIds
	}
	return nil
}

// TransactionListResponse is a subset of the ListResponse message, for
// returning results during the execution of a transaction.
type TransactionListResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*TransactionListResponse_Result
	//	*TransactionListResponse_Finished
	Response      isTransactionListResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionListResponse) Reset() {
	*x = TransactionListResponse{}
	mi := &file_db_transaction_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionListResponse) ProtoMessage() {}

func (x *TransactionListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_db_transaction_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionListResponse.ProtoReflect.Descriptor instead.
func (*TransactionListResponse) Descriptor() ([]byte, []int) {
	return file_db_transaction_proto_rawDescGZIP(), []int{11}
}

func (x *TransactionListResponse) GetResponse() isTransactionListResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *TransactionListResponse) GetResult() *ListPartialResult {
	if x != nil {
		if x, ok := x.Response.(*TransactionListResponse_Result); ok {
			return x.Result
		}
	}
	return nil
}

func (x *TransactionListResponse) GetFinished() *ListFinished {
	if x != nil {
		if x, ok := x.Response.(*TransactionListResponse_Finished); ok {
			return x.Finished
		}
	}
	return nil
}

type isTransactionListResponse_Response interface {
	isTransactionListResponse_Response()
}

type TransactionListResponse_Result struct {
	// Result is a segment of the result set - multiple of these may be returned
	// in a stream before the final "finished" message.
	Result *ListPartialResult `protobuf:"bytes,1,opt,name=result,proto3,oneof"`
}

type TransactionListResponse_Finished struct {
	// Finished is sent when there are no more results in this operation, and
	// there will only be one.
	Finished *ListFinished `protobuf:"bytes,2,opt,name=finished,proto3,oneof"`
}

func (*TransactionListResponse_Result) isTransactionListResponse_Response() {}

func (*TransactionListResponse_Finished) isTransactionListResponse_Response() {}

type TransactionFinished struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Did the commit finish (the alternative is that it was aborted/rolled back)
	Committed bool `protobuf:"varint,1,opt,name=committed,proto3" json:"committed,omitempty"`
	// put_results contains the full result of each Put operation. This only comes
	// back with the TransactionFinished message because full metadata isn't
	// available until then.
	PutResults []*Item `protobuf:"bytes,2,rep,name=put_results,json=putResults,proto3" json:"put_results,omitempty"`
	// delete_results contains the full result of each Delete operation. This only
	// comes back with the TransactionFinished message because full metadata isn't
	// available until then.
	DeleteResults []*DeleteResult `protobuf:"bytes,3,rep,name=delete_results,json=deleteResults,proto3" json:"delete_results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionFinished) Reset() {
	*x = TransactionFinished{}
	mi := &file_db_transaction_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionFinished) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionFinished) ProtoMessage() {}

func (x *TransactionFinished) ProtoReflect() protoreflect.Message {
	mi := &file_db_transaction_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionFinished.ProtoReflect.Descriptor instead.
func (*TransactionFinished) Descriptor() ([]byte, []int) {
	return file_db_transaction_proto_rawDescGZIP(), []int{12}
}

func (x *TransactionFinished) GetCommitted() bool {
	if x != nil {
		return x.Committed
	}
	return false
}

func (x *TransactionFinished) GetPutResults() []*Item {
	if x != nil {
		return x.PutResults
	}
	return nil
}

func (x *TransactionFinished) GetDeleteResults() []*DeleteResult {
	if x != nil {
		return x.DeleteResults
	}
	return nil
}

var File_db_transaction_proto protoreflect.FileDescriptor

const file_db_transaction_proto_rawDesc = "" +
	"\n" +
	"\x14db/transaction.proto\x12\n" +
	"stately.db\x1a\x1bbuf/validate/validate.proto\x1a\x16db/continue_list.proto\x1a\x0fdb/delete.proto\x1a\fdb/get.proto\x1a\rdb/item.proto\x1a\x16db/item_property.proto\x1a\rdb/list.proto\x1a\fdb/put.proto\x1a\x1bgoogle/protobuf/empty.proto\"\xae\x04\n" +
	"\x12TransactionRequest\x12%\n" +
	"\n" +
	"message_id\x18\x01 \x01(\rB\x06\xbaH\x03\xc8\x01\x01R\tmessageId\x124\n" +
	"\x05begin\x18\x02 \x01(\v2\x1c.stately.db.TransactionBeginH\x00R\x05begin\x129\n" +
	"\tget_items\x18\x03 \x01(\v2\x1a.stately.db.TransactionGetH\x00R\bgetItems\x12A\n" +
	"\n" +
	"begin_list\x18\x04 \x01(\v2 .stately.db.TransactionBeginListH\x00R\tbeginList\x12J\n" +
	"\rcontinue_list\x18\x05 \x01(\v2#.stately.db.TransactionContinueListH\x00R\fcontinueList\x129\n" +
	"\tput_items\x18\x06 \x01(\v2\x1a.stately.db.TransactionPutH\x00R\bputItems\x12B\n" +
	"\fdelete_items\x18\a \x01(\v2\x1d.stately.db.TransactionDeleteH\x00R\vdeleteItems\x120\n" +
	"\x06commit\x18\b \x01(\v2\x16.google.protobuf.EmptyH\x00R\x06commit\x12.\n" +
	"\x05abort\x18\t \x01(\v2\x16.google.protobuf.EmptyH\x00R\x05abortB\x10\n" +
	"\acommand\x12\x05\xbaH\x02\b\x01\"\xd7\x02\n" +
	"\x13TransactionResponse\x12%\n" +
	"\n" +
	"message_id\x18\x01 \x01(\rB\x06\xbaH\x03\xc8\x01\x01R\tmessageId\x12E\n" +
	"\vget_results\x18\x02 \x01(\v2\".stately.db.TransactionGetResponseH\x00R\n" +
	"getResults\x128\n" +
	"\aput_ack\x18\x03 \x01(\v2\x1d.stately.db.TransactionPutAckH\x00R\x06putAck\x12H\n" +
	"\flist_results\x18\x04 \x01(\v2#.stately.db.TransactionListResponseH\x00R\vlistResults\x12=\n" +
	"\bfinished\x18\x05 \x01(\v2\x1f.stately.db.TransactionFinishedH\x00R\bfinishedB\x0f\n" +
	"\x06result\x12\x05\xbaH\x02\b\x01\"\x86\x01\n" +
	"\x10TransactionBegin\x12!\n" +
	"\bstore_id\x18\x01 \x01(\x04B\x06\xbaH\x03\xc8\x01\x01R\astoreId\x122\n" +
	"\x11schema_version_id\x18\x02 \x01(\rB\x06\xbaH\x03\xc8\x01\x01R\x0fschemaVersionId\x12\x1b\n" +
	"\tschema_id\x18\x03 \x01(\x04R\bschemaId\"C\n" +
	"\x0eTransactionGet\x121\n" +
	"\x04gets\x18\x01 \x03(\v2\x13.stately.db.GetItemB\b\xbaH\x05\x92\x01\x02\b\x01R\x04gets\"\xe1\x01\n" +
	"\x14TransactionBeginList\x12.\n" +
	"\x0fkey_path_prefix\x18\x01 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\rkeyPathPrefix\x12\x14\n" +
	"\x05limit\x18\x02 \x01(\rR\x05limit\x12A\n" +
	"\rsort_property\x18\x03 \x01(\x0e2\x1c.stately.db.SortablePropertyR\fsortProperty\x12@\n" +
	"\x0esort_direction\x18\x04 \x01(\x0e2\x19.stately.db.SortDirectionR\rsortDirection\"\x81\x01\n" +
	"\x17TransactionContinueList\x12%\n" +
	"\n" +
	"token_data\x18\x01 \x01(\fB\x06\xbaH\x03\xc8\x01\x01R\ttokenData\x12?\n" +
	"\tdirection\x18\x04 \x01(\x0e2!.stately.db.ContinueListDirectionR\tdirection\"C\n" +
	"\x0eTransactionPut\x121\n" +
	"\x04puts\x18\x01 \x03(\v2\x13.stately.db.PutItemB\b\xbaH\x05\x92\x01\x02\b\x01R\x04puts\"O\n" +
	"\x11TransactionDelete\x12:\n" +
	"\adeletes\x18\x01 \x03(\v2\x16.stately.db.DeleteItemB\b\xbaH\x05\x92\x01\x02\b\x01R\adeletes\"@\n" +
	"\x16TransactionGetResponse\x12&\n" +
	"\x05items\x18\x01 \x03(\v2\x10.stately.db.ItemR\x05items\"D\n" +
	"\vGeneratedID\x12\x14\n" +
	"\x04uint\x18\x01 \x01(\x04H\x00R\x04uint\x12\x16\n" +
	"\x05bytes\x18\x02 \x01(\fH\x00R\x05bytesB\a\n" +
	"\x05value\"Y\n" +
	"\x11TransactionPutAck\x12D\n" +
	"\rgenerated_ids\x18\x01 \x03(\v2\x17.stately.db.GeneratedIDB\x06\xbaH\x03\xc8\x01\x01R\fgeneratedIds\"\x9d\x01\n" +
	"\x17TransactionListResponse\x127\n" +
	"\x06result\x18\x01 \x01(\v2\x1d.stately.db.ListPartialResultH\x00R\x06result\x126\n" +
	"\bfinished\x18\x02 \x01(\v2\x18.stately.db.ListFinishedH\x00R\bfinishedB\x11\n" +
	"\bresponse\x12\x05\xbaH\x02\b\x01\"\xa7\x01\n" +
	"\x13TransactionFinished\x12\x1c\n" +
	"\tcommitted\x18\x01 \x01(\bR\tcommitted\x121\n" +
	"\vput_results\x18\x02 \x03(\v2\x10.stately.db.ItemR\n" +
	"putResults\x12?\n" +
	"\x0edelete_results\x18\x03 \x03(\v2\x18.stately.db.DeleteResultR\rdeleteResultsB\x91\x01\n" +
	"\x0ecom.stately.dbB\x10TransactionProtoP\x01Z$github.com/StatelyCloud/go-sdk/pb/db\xa2\x02\x03SDX\xaa\x02\n" +
	"Stately.Db\xca\x02\n" +
	"Stately\\Db\xe2\x02\x16Stately\\Db\\GPBMetadata\xea\x02\vStately::Dbb\x06proto3"

var (
	file_db_transaction_proto_rawDescOnce sync.Once
	file_db_transaction_proto_rawDescData []byte
)

func file_db_transaction_proto_rawDescGZIP() []byte {
	file_db_transaction_proto_rawDescOnce.Do(func() {
		file_db_transaction_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_db_transaction_proto_rawDesc), len(file_db_transaction_proto_rawDesc)))
	})
	return file_db_transaction_proto_rawDescData
}

var file_db_transaction_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_db_transaction_proto_goTypes = []any{
	(*TransactionRequest)(nil),      // 0: stately.db.TransactionRequest
	(*TransactionResponse)(nil),     // 1: stately.db.TransactionResponse
	(*TransactionBegin)(nil),        // 2: stately.db.TransactionBegin
	(*TransactionGet)(nil),          // 3: stately.db.TransactionGet
	(*TransactionBeginList)(nil),    // 4: stately.db.TransactionBeginList
	(*TransactionContinueList)(nil), // 5: stately.db.TransactionContinueList
	(*TransactionPut)(nil),          // 6: stately.db.TransactionPut
	(*TransactionDelete)(nil),       // 7: stately.db.TransactionDelete
	(*TransactionGetResponse)(nil),  // 8: stately.db.TransactionGetResponse
	(*GeneratedID)(nil),             // 9: stately.db.GeneratedID
	(*TransactionPutAck)(nil),       // 10: stately.db.TransactionPutAck
	(*TransactionListResponse)(nil), // 11: stately.db.TransactionListResponse
	(*TransactionFinished)(nil),     // 12: stately.db.TransactionFinished
	(*emptypb.Empty)(nil),           // 13: google.protobuf.Empty
	(*GetItem)(nil),                 // 14: stately.db.GetItem
	(SortableProperty)(0),           // 15: stately.db.SortableProperty
	(SortDirection)(0),              // 16: stately.db.SortDirection
	(ContinueListDirection)(0),      // 17: stately.db.ContinueListDirection
	(*PutItem)(nil),                 // 18: stately.db.PutItem
	(*DeleteItem)(nil),              // 19: stately.db.DeleteItem
	(*Item)(nil),                    // 20: stately.db.Item
	(*ListPartialResult)(nil),       // 21: stately.db.ListPartialResult
	(*ListFinished)(nil),            // 22: stately.db.ListFinished
	(*DeleteResult)(nil),            // 23: stately.db.DeleteResult
}
var file_db_transaction_proto_depIdxs = []int32{
	2,  // 0: stately.db.TransactionRequest.begin:type_name -> stately.db.TransactionBegin
	3,  // 1: stately.db.TransactionRequest.get_items:type_name -> stately.db.TransactionGet
	4,  // 2: stately.db.TransactionRequest.begin_list:type_name -> stately.db.TransactionBeginList
	5,  // 3: stately.db.TransactionRequest.continue_list:type_name -> stately.db.TransactionContinueList
	6,  // 4: stately.db.TransactionRequest.put_items:type_name -> stately.db.TransactionPut
	7,  // 5: stately.db.TransactionRequest.delete_items:type_name -> stately.db.TransactionDelete
	13, // 6: stately.db.TransactionRequest.commit:type_name -> google.protobuf.Empty
	13, // 7: stately.db.TransactionRequest.abort:type_name -> google.protobuf.Empty
	8,  // 8: stately.db.TransactionResponse.get_results:type_name -> stately.db.TransactionGetResponse
	10, // 9: stately.db.TransactionResponse.put_ack:type_name -> stately.db.TransactionPutAck
	11, // 10: stately.db.TransactionResponse.list_results:type_name -> stately.db.TransactionListResponse
	12, // 11: stately.db.TransactionResponse.finished:type_name -> stately.db.TransactionFinished
	14, // 12: stately.db.TransactionGet.gets:type_name -> stately.db.GetItem
	15, // 13: stately.db.TransactionBeginList.sort_property:type_name -> stately.db.SortableProperty
	16, // 14: stately.db.TransactionBeginList.sort_direction:type_name -> stately.db.SortDirection
	17, // 15: stately.db.TransactionContinueList.direction:type_name -> stately.db.ContinueListDirection
	18, // 16: stately.db.TransactionPut.puts:type_name -> stately.db.PutItem
	19, // 17: stately.db.TransactionDelete.deletes:type_name -> stately.db.DeleteItem
	20, // 18: stately.db.TransactionGetResponse.items:type_name -> stately.db.Item
	9,  // 19: stately.db.TransactionPutAck.generated_ids:type_name -> stately.db.GeneratedID
	21, // 20: stately.db.TransactionListResponse.result:type_name -> stately.db.ListPartialResult
	22, // 21: stately.db.TransactionListResponse.finished:type_name -> stately.db.ListFinished
	20, // 22: stately.db.TransactionFinished.put_results:type_name -> stately.db.Item
	23, // 23: stately.db.TransactionFinished.delete_results:type_name -> stately.db.DeleteResult
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_db_transaction_proto_init() }
func file_db_transaction_proto_init() {
	if File_db_transaction_proto != nil {
		return
	}
	file_db_continue_list_proto_init()
	file_db_delete_proto_init()
	file_db_get_proto_init()
	file_db_item_proto_init()
	file_db_item_property_proto_init()
	file_db_list_proto_init()
	file_db_put_proto_init()
	file_db_transaction_proto_msgTypes[0].OneofWrappers = []any{
		(*TransactionRequest_Begin)(nil),
		(*TransactionRequest_GetItems)(nil),
		(*TransactionRequest_BeginList)(nil),
		(*TransactionRequest_ContinueList)(nil),
		(*TransactionRequest_PutItems)(nil),
		(*TransactionRequest_DeleteItems)(nil),
		(*TransactionRequest_Commit)(nil),
		(*TransactionRequest_Abort)(nil),
	}
	file_db_transaction_proto_msgTypes[1].OneofWrappers = []any{
		(*TransactionResponse_GetResults)(nil),
		(*TransactionResponse_PutAck)(nil),
		(*TransactionResponse_ListResults)(nil),
		(*TransactionResponse_Finished)(nil),
	}
	file_db_transaction_proto_msgTypes[9].OneofWrappers = []any{
		(*GeneratedID_Uint)(nil),
		(*GeneratedID_Bytes)(nil),
	}
	file_db_transaction_proto_msgTypes[11].OneofWrappers = []any{
		(*TransactionListResponse_Result)(nil),
		(*TransactionListResponse_Finished)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_db_transaction_proto_rawDesc), len(file_db_transaction_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_db_transaction_proto_goTypes,
		DependencyIndexes: file_db_transaction_proto_depIdxs,
		MessageInfos:      file_db_transaction_proto_msgTypes,
	}.Build()
	File_db_transaction_proto = out.File
	file_db_transaction_proto_goTypes = nil
	file_db_transaction_proto_depIdxs = nil
}
