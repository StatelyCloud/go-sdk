// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: db/put.proto

package db

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PutRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// store_id is a globally unique Store ID, which can be looked up from the
	// console or CLI.
	StoreId uint64 `protobuf:"varint,1,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty"`
	// items to put into the store.
	Puts []*PutItem `protobuf:"bytes,2,rep,name=puts,proto3" json:"puts,omitempty"`
	// schema_version_id is the version of the store's schema to use to interpret
	// items. If there is no version with this ID, the operation will error with
	// SchemaVersionNotFound error. You should not have to set this manually as
	// your generated SDK should know its schema version and wire this in for you.
	SchemaVersionId uint32 `protobuf:"varint,3,opt,name=schema_version_id,json=schemaVersionId,proto3" json:"schema_version_id,omitempty"`
	// schema_id refers to the schema to use for this operation.
	// If the store_id does not have a schema with this ID, the operation will
	// error with SchemaNotFound error. You should not have to set this manually
	// as your generated SDK should know its schema and wire this in for you.
	SchemaId      uint64 `protobuf:"varint,4,opt,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty"` // [(buf.validate.field).required = true]; (after clients have been regen'd and updated)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PutRequest) Reset() {
	*x = PutRequest{}
	mi := &file_db_put_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutRequest) ProtoMessage() {}

func (x *PutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_db_put_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutRequest.ProtoReflect.Descriptor instead.
func (*PutRequest) Descriptor() ([]byte, []int) {
	return file_db_put_proto_rawDescGZIP(), []int{0}
}

func (x *PutRequest) GetStoreId() uint64 {
	if x != nil {
		return x.StoreId
	}
	return 0
}

func (x *PutRequest) GetPuts() []*PutItem {
	if x != nil {
		return x.Puts
	}
	return nil
}

func (x *PutRequest) GetSchemaVersionId() uint32 {
	if x != nil {
		return x.SchemaVersionId
	}
	return 0
}

func (x *PutRequest) GetSchemaId() uint64 {
	if x != nil {
		return x.SchemaId
	}
	return 0
}

type PutItem struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// item is the data to be put, including its item_type.
	Item *Item `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	// overwrite_metadata_timestamps indicates that any "fromMetadata" timestamp
	// fields in the incoming payload should be saved as provided in the database.
	// Normally these would be ignored as they are automatically maintained, but
	// this flag can be useful for migrations from other systems. Note that this
	// only works for timestamps (createdAtTime and lastModifiedAtTime) - versions
	// cannot be overridden.
	OverwriteMetadataTimestamps bool `protobuf:"varint,2,opt,name=overwrite_metadata_timestamps,json=overwriteMetadataTimestamps,proto3" json:"overwrite_metadata_timestamps,omitempty"`
	// must_not_exist is a condition that indicates this item must not already
	// exist at any of its key paths. If there is already an item at one of those
	// paths, the Put operation will fail with a ConditionalCheckFailed error.
	// Note that if the item has an `initialValue` field in its key, that initial
	// value will automatically be chosen not to conflict with existing items, so
	// this condition only applies to key paths that do not contain the
	// `initialValue` field.
	MustNotExist  bool `protobuf:"varint,3,opt,name=must_not_exist,json=mustNotExist,proto3" json:"must_not_exist,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PutItem) Reset() {
	*x = PutItem{}
	mi := &file_db_put_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PutItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutItem) ProtoMessage() {}

func (x *PutItem) ProtoReflect() protoreflect.Message {
	mi := &file_db_put_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutItem.ProtoReflect.Descriptor instead.
func (*PutItem) Descriptor() ([]byte, []int) {
	return file_db_put_proto_rawDescGZIP(), []int{1}
}

func (x *PutItem) GetItem() *Item {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *PutItem) GetOverwriteMetadataTimestamps() bool {
	if x != nil {
		return x.OverwriteMetadataTimestamps
	}
	return false
}

func (x *PutItem) GetMustNotExist() bool {
	if x != nil {
		return x.MustNotExist
	}
	return false
}

type PutResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// items is the full result of each put operation. The response items are in
	// the same order as the request items. Each item is fully "filled out" - for
	// example, `initialValue` and `fromMetadata` fields are resolved.
	Items         []*Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PutResponse) Reset() {
	*x = PutResponse{}
	mi := &file_db_put_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutResponse) ProtoMessage() {}

func (x *PutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_db_put_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutResponse.ProtoReflect.Descriptor instead.
func (*PutResponse) Descriptor() ([]byte, []int) {
	return file_db_put_proto_rawDescGZIP(), []int{2}
}

func (x *PutResponse) GetItems() []*Item {
	if x != nil {
		return x.Items
	}
	return nil
}

var File_db_put_proto protoreflect.FileDescriptor

const file_db_put_proto_rawDesc = "" +
	"\n" +
	"\fdb/put.proto\x12\n" +
	"stately.db\x1a\x1bbuf/validate/validate.proto\x1a\rdb/item.proto\"\xb3\x01\n" +
	"\n" +
	"PutRequest\x12!\n" +
	"\bstore_id\x18\x01 \x01(\x04B\x06\xbaH\x03\xc8\x01\x01R\astoreId\x121\n" +
	"\x04puts\x18\x02 \x03(\v2\x13.stately.db.PutItemB\b\xbaH\x05\x92\x01\x02\b\x01R\x04puts\x122\n" +
	"\x11schema_version_id\x18\x03 \x01(\rB\x06\xbaH\x03\xc8\x01\x01R\x0fschemaVersionId\x12\x1b\n" +
	"\tschema_id\x18\x04 \x01(\x04R\bschemaId\"\xa1\x01\n" +
	"\aPutItem\x12,\n" +
	"\x04item\x18\x01 \x01(\v2\x10.stately.db.ItemB\x06\xbaH\x03\xc8\x01\x01R\x04item\x12B\n" +
	"\x1doverwrite_metadata_timestamps\x18\x02 \x01(\bR\x1boverwriteMetadataTimestamps\x12$\n" +
	"\x0emust_not_exist\x18\x03 \x01(\bR\fmustNotExist\"=\n" +
	"\vPutResponse\x12.\n" +
	"\x05items\x18\x01 \x03(\v2\x10.stately.db.ItemB\x06\xbaH\x03\xc8\x01\x01R\x05itemsB\x89\x01\n" +
	"\x0ecom.stately.dbB\bPutProtoP\x01Z$github.com/StatelyCloud/go-sdk/pb/db\xa2\x02\x03SDX\xaa\x02\n" +
	"Stately.Db\xca\x02\n" +
	"Stately\\Db\xe2\x02\x16Stately\\Db\\GPBMetadata\xea\x02\vStately::Dbb\x06proto3"

var (
	file_db_put_proto_rawDescOnce sync.Once
	file_db_put_proto_rawDescData []byte
)

func file_db_put_proto_rawDescGZIP() []byte {
	file_db_put_proto_rawDescOnce.Do(func() {
		file_db_put_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_db_put_proto_rawDesc), len(file_db_put_proto_rawDesc)))
	})
	return file_db_put_proto_rawDescData
}

var file_db_put_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_db_put_proto_goTypes = []any{
	(*PutRequest)(nil),  // 0: stately.db.PutRequest
	(*PutItem)(nil),     // 1: stately.db.PutItem
	(*PutResponse)(nil), // 2: stately.db.PutResponse
	(*Item)(nil),        // 3: stately.db.Item
}
var file_db_put_proto_depIdxs = []int32{
	1, // 0: stately.db.PutRequest.puts:type_name -> stately.db.PutItem
	3, // 1: stately.db.PutItem.item:type_name -> stately.db.Item
	3, // 2: stately.db.PutResponse.items:type_name -> stately.db.Item
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_db_put_proto_init() }
func file_db_put_proto_init() {
	if File_db_put_proto != nil {
		return
	}
	file_db_item_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_db_put_proto_rawDesc), len(file_db_put_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_db_put_proto_goTypes,
		DependencyIndexes: file_db_put_proto_depIdxs,
		MessageInfos:      file_db_put_proto_msgTypes,
	}.Build()
	File_db_put_proto = out.File
	file_db_put_proto_goTypes = nil
	file_db_put_proto_depIdxs = nil
}
