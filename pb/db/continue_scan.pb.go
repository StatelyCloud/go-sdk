// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: db/continue_scan.proto

package db

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ContinueScanRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// token_data is an opaque list continuation token returned by a previous call
	// to BeginScan or ContinueScan.
	TokenData []byte `protobuf:"bytes,1,opt,name=token_data,json=tokenData,proto3" json:"token_data,omitempty"`
	// schema_version_id is the schema version id the client is using. This is
	// used to ensure the same schema version is used across each page of the list.
	// If the version the token was created with is different from the client's
	// current version, the operation will error with SchemaVersionMismatch error,
	// in which case you should start over with a fresh BeginScan call.
	SchemaVersionId uint32 `protobuf:"varint,2,opt,name=schema_version_id,json=schemaVersionId,proto3" json:"schema_version_id,omitempty"`
	// schema_id refers to the schema to use for this operation.
	// If the store_id does not have a schema with this ID, the operation will
	// error with SchemaNotFound error. You should not have to set this manually
	// as your generated SDK should know its schema and wire this in for you.
	SchemaId      uint64 `protobuf:"varint,3,opt,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty"` // [(buf.validate.field).required = true]; (after clients have been regen'd and updated)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContinueScanRequest) Reset() {
	*x = ContinueScanRequest{}
	mi := &file_db_continue_scan_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContinueScanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContinueScanRequest) ProtoMessage() {}

func (x *ContinueScanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_db_continue_scan_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContinueScanRequest.ProtoReflect.Descriptor instead.
func (*ContinueScanRequest) Descriptor() ([]byte, []int) {
	return file_db_continue_scan_proto_rawDescGZIP(), []int{0}
}

func (x *ContinueScanRequest) GetTokenData() []byte {
	if x != nil {
		return x.TokenData
	}
	return nil
}

func (x *ContinueScanRequest) GetSchemaVersionId() uint32 {
	if x != nil {
		return x.SchemaVersionId
	}
	return 0
}

func (x *ContinueScanRequest) GetSchemaId() uint64 {
	if x != nil {
		return x.SchemaId
	}
	return 0
}

var File_db_continue_scan_proto protoreflect.FileDescriptor

const file_db_continue_scan_proto_rawDesc = "" +
	"\n" +
	"\x16db/continue_scan.proto\x12\n" +
	"stately.db\x1a\x1bbuf/validate/validate.proto\"\x8d\x01\n" +
	"\x13ContinueScanRequest\x12%\n" +
	"\n" +
	"token_data\x18\x01 \x01(\fB\x06\xbaH\x03\xc8\x01\x01R\ttokenData\x122\n" +
	"\x11schema_version_id\x18\x02 \x01(\rB\x06\xbaH\x03\xc8\x01\x01R\x0fschemaVersionId\x12\x1b\n" +
	"\tschema_id\x18\x03 \x01(\x04R\bschemaIdB\x92\x01\n" +
	"\x0ecom.stately.dbB\x11ContinueScanProtoP\x01Z$github.com/StatelyCloud/go-sdk/pb/db\xa2\x02\x03SDX\xaa\x02\n" +
	"Stately.Db\xca\x02\n" +
	"Stately\\Db\xe2\x02\x16Stately\\Db\\GPBMetadata\xea\x02\vStately::Dbb\x06proto3"

var (
	file_db_continue_scan_proto_rawDescOnce sync.Once
	file_db_continue_scan_proto_rawDescData []byte
)

func file_db_continue_scan_proto_rawDescGZIP() []byte {
	file_db_continue_scan_proto_rawDescOnce.Do(func() {
		file_db_continue_scan_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_db_continue_scan_proto_rawDesc), len(file_db_continue_scan_proto_rawDesc)))
	})
	return file_db_continue_scan_proto_rawDescData
}

var file_db_continue_scan_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_db_continue_scan_proto_goTypes = []any{
	(*ContinueScanRequest)(nil), // 0: stately.db.ContinueScanRequest
}
var file_db_continue_scan_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_db_continue_scan_proto_init() }
func file_db_continue_scan_proto_init() {
	if File_db_continue_scan_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_db_continue_scan_proto_rawDesc), len(file_db_continue_scan_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_db_continue_scan_proto_goTypes,
		DependencyIndexes: file_db_continue_scan_proto_depIdxs,
		MessageInfos:      file_db_continue_scan_proto_msgTypes,
	}.Build()
	File_db_continue_scan_proto = out.File
	file_db_continue_scan_proto_goTypes = nil
	file_db_continue_scan_proto_depIdxs = nil
}
