// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: user/service.proto

package userconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	user "github.com/StatelyCloud/go-sdk/pb/user"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UserName is the fully-qualified name of the User service.
	UserName = "stately.User"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserWhoamiProcedure is the fully-qualified name of the User's Whoami RPC.
	UserWhoamiProcedure = "/stately.User/Whoami"
	// UserGetCallerIdentityProcedure is the fully-qualified name of the User's GetCallerIdentity RPC.
	UserGetCallerIdentityProcedure = "/stately.User/GetCallerIdentity"
	// UserEnrollProcedure is the fully-qualified name of the User's Enroll RPC.
	UserEnrollProcedure = "/stately.User/Enroll"
	// UserEnrollMachineUserProcedure is the fully-qualified name of the User's EnrollMachineUser RPC.
	UserEnrollMachineUserProcedure = "/stately.User/EnrollMachineUser"
	// UserCreateProjectProcedure is the fully-qualified name of the User's CreateProject RPC.
	UserCreateProjectProcedure = "/stately.User/CreateProject"
	// UserDeleteProjectProcedure is the fully-qualified name of the User's DeleteProject RPC.
	UserDeleteProjectProcedure = "/stately.User/DeleteProject"
	// UserCreateOrganizationProcedure is the fully-qualified name of the User's CreateOrganization RPC.
	UserCreateOrganizationProcedure = "/stately.User/CreateOrganization"
	// UserListAllOrganizationsProcedure is the fully-qualified name of the User's ListAllOrganizations
	// RPC.
	UserListAllOrganizationsProcedure = "/stately.User/ListAllOrganizations"
	// UserDeleteOrganizationProcedure is the fully-qualified name of the User's DeleteOrganization RPC.
	UserDeleteOrganizationProcedure = "/stately.User/DeleteOrganization"
	// UserAddUsersToOrganizationProcedure is the fully-qualified name of the User's
	// AddUsersToOrganization RPC.
	UserAddUsersToOrganizationProcedure = "/stately.User/AddUsersToOrganization"
	// UserRemoveUsersFromOrganizationProcedure is the fully-qualified name of the User's
	// RemoveUsersFromOrganization RPC.
	UserRemoveUsersFromOrganizationProcedure = "/stately.User/RemoveUsersFromOrganization"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	userServiceDescriptor                           = user.File_user_service_proto.Services().ByName("User")
	userWhoamiMethodDescriptor                      = userServiceDescriptor.Methods().ByName("Whoami")
	userGetCallerIdentityMethodDescriptor           = userServiceDescriptor.Methods().ByName("GetCallerIdentity")
	userEnrollMethodDescriptor                      = userServiceDescriptor.Methods().ByName("Enroll")
	userEnrollMachineUserMethodDescriptor           = userServiceDescriptor.Methods().ByName("EnrollMachineUser")
	userCreateProjectMethodDescriptor               = userServiceDescriptor.Methods().ByName("CreateProject")
	userDeleteProjectMethodDescriptor               = userServiceDescriptor.Methods().ByName("DeleteProject")
	userCreateOrganizationMethodDescriptor          = userServiceDescriptor.Methods().ByName("CreateOrganization")
	userListAllOrganizationsMethodDescriptor        = userServiceDescriptor.Methods().ByName("ListAllOrganizations")
	userDeleteOrganizationMethodDescriptor          = userServiceDescriptor.Methods().ByName("DeleteOrganization")
	userAddUsersToOrganizationMethodDescriptor      = userServiceDescriptor.Methods().ByName("AddUsersToOrganization")
	userRemoveUsersFromOrganizationMethodDescriptor = userServiceDescriptor.Methods().ByName("RemoveUsersFromOrganization")
)

// UserClient is a client for the stately.User service.
type UserClient interface {
	// Whoami returns information about the user that calls it (based on the auth
	// token). This includes information about what organizations the user belongs
	// to, what projects they have access to, what roles(?) they can use, etc.
	// This is meant to be called from the Web Console or CLI in order to populate
	// some basic information in the UI and allow calling other APIs like
	// ListStores. It will return a NotFound error if the user does not exist -
	// you can call Enroll to create the user and then try again.
	Whoami(context.Context, *connect.Request[user.WhoamiRequest]) (*connect.Response[user.WhoamiResponse], error)
	// GetCallerIdentity returns the Stately UserID of the caller.
	// This simple API is meant for testing execution environments to ensure that the
	// client is correctly authenticated.
	// If the caller is not enrolled in Stately then NotFound will be returned.
	GetCallerIdentity(context.Context, *connect.Request[user.GetCallerIdentityRequest]) (*connect.Response[user.GetCallerIdentityResponse], error)
	// Enroll bootstraps a new User given a service principal ID from an auth
	// provider. This includes creating a user record for them, and a default
	// organization, project, and store for them to use. User information is
	// automatically read from the auth token.
	Enroll(context.Context, *connect.Request[user.EnrollRequest]) (*connect.Response[user.EnrollResponse], error)
	// EnrollMachineUser bootstraps a new machine user principal ID from an auth
	// provider and enrolls them in the organization ID which was passed in the
	// request. Once a machine user has been enrolled in one organization, it
	// cannot be in any other organization unless it is removed from the first
	// one. ** THIS IS AN ADMIN ONLY API **
	EnrollMachineUser(context.Context, *connect.Request[user.EnrollMachineUserRequest]) (*connect.Response[user.EnrollMachineUserResponse], error)
	// CreateProject makes a new project within an organization. It will fail if
	// the project already exists or you don't have permission to create projects
	// in that organization.
	CreateProject(context.Context, *connect.Request[user.CreateProjectRequest]) (*connect.Response[user.CreateProjectResponse], error)
	// DeleteProject schedules a project to be deleted, including all data within it.
	// This operation takes some time so it returns a handle to an operation that
	// you can check to see if it is complete. This will fail if the project does
	// not exist, if the project is already being deleted, or if you do not have
	// permission to delete project.
	DeleteProject(context.Context, *connect.Request[user.DeleteProjectRequest]) (*connect.Response[user.DeleteProjectResponse], error)
	// CreateOrganization makes a new organization, optionally including the
	// current user as a member. It will fail if you don't have permission to
	// create organizations. Note that it is currently possible to create multiple
	// orgs with the same name.
	CreateOrganization(context.Context, *connect.Request[user.CreateOrganizationRequest]) (*connect.Response[user.CreateOrganizationResponse], error)
	// ListAllOrganizations lists all the organizations registered with Stately.
	// It will fail if you don't have permission to list all organizations (only
	// admins have this). This includes information about all the members and
	// resources in each organization.
	ListAllOrganizations(context.Context, *connect.Request[user.ListAllOrganizationsRequest]) (*connect.Response[user.ListAllOrganizationsResponse], error)
	// DeleteOrganization deletes an organization, including all data within it.
	// This will fail if the organization does not exist, or if you do not have
	// permission to delete the organization. It is safe to retry this operation.
	DeleteOrganization(context.Context, *connect.Request[user.DeleteOrganizationRequest]) (*connect.Response[user.DeleteOrganizationResponse], error)
	// AddUsersToOrganization adds users to an organization. This will fail if the
	// organization does not exist, or if you do not have permission to update the
	// organization. It is a noop if the user is already in the organization.
	AddUsersToOrganization(context.Context, *connect.Request[user.AddUsersToOrganizationRequest]) (*connect.Response[user.AddUsersToOrganizationResponse], error)
	// RemoveUsersFromOrganization removes users from an organization. This will
	// fail if the organization does not exist, or if you do not have permission
	// to update the organization. It is a noop if the user is not in the
	// organization.
	RemoveUsersFromOrganization(context.Context, *connect.Request[user.RemoveUsersFromOrganizationRequest]) (*connect.Response[user.RemoveUsersFromOrganizationResponse], error)
}

// NewUserClient constructs a client for the stately.User service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &userClient{
		whoami: connect.NewClient[user.WhoamiRequest, user.WhoamiResponse](
			httpClient,
			baseURL+UserWhoamiProcedure,
			connect.WithSchema(userWhoamiMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getCallerIdentity: connect.NewClient[user.GetCallerIdentityRequest, user.GetCallerIdentityResponse](
			httpClient,
			baseURL+UserGetCallerIdentityProcedure,
			connect.WithSchema(userGetCallerIdentityMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		enroll: connect.NewClient[user.EnrollRequest, user.EnrollResponse](
			httpClient,
			baseURL+UserEnrollProcedure,
			connect.WithSchema(userEnrollMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
		enrollMachineUser: connect.NewClient[user.EnrollMachineUserRequest, user.EnrollMachineUserResponse](
			httpClient,
			baseURL+UserEnrollMachineUserProcedure,
			connect.WithSchema(userEnrollMachineUserMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
		createProject: connect.NewClient[user.CreateProjectRequest, user.CreateProjectResponse](
			httpClient,
			baseURL+UserCreateProjectProcedure,
			connect.WithSchema(userCreateProjectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteProject: connect.NewClient[user.DeleteProjectRequest, user.DeleteProjectResponse](
			httpClient,
			baseURL+UserDeleteProjectProcedure,
			connect.WithSchema(userDeleteProjectMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
		createOrganization: connect.NewClient[user.CreateOrganizationRequest, user.CreateOrganizationResponse](
			httpClient,
			baseURL+UserCreateOrganizationProcedure,
			connect.WithSchema(userCreateOrganizationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listAllOrganizations: connect.NewClient[user.ListAllOrganizationsRequest, user.ListAllOrganizationsResponse](
			httpClient,
			baseURL+UserListAllOrganizationsProcedure,
			connect.WithSchema(userListAllOrganizationsMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		deleteOrganization: connect.NewClient[user.DeleteOrganizationRequest, user.DeleteOrganizationResponse](
			httpClient,
			baseURL+UserDeleteOrganizationProcedure,
			connect.WithSchema(userDeleteOrganizationMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
		addUsersToOrganization: connect.NewClient[user.AddUsersToOrganizationRequest, user.AddUsersToOrganizationResponse](
			httpClient,
			baseURL+UserAddUsersToOrganizationProcedure,
			connect.WithSchema(userAddUsersToOrganizationMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
		removeUsersFromOrganization: connect.NewClient[user.RemoveUsersFromOrganizationRequest, user.RemoveUsersFromOrganizationResponse](
			httpClient,
			baseURL+UserRemoveUsersFromOrganizationProcedure,
			connect.WithSchema(userRemoveUsersFromOrganizationMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
	}
}

// userClient implements UserClient.
type userClient struct {
	whoami                      *connect.Client[user.WhoamiRequest, user.WhoamiResponse]
	getCallerIdentity           *connect.Client[user.GetCallerIdentityRequest, user.GetCallerIdentityResponse]
	enroll                      *connect.Client[user.EnrollRequest, user.EnrollResponse]
	enrollMachineUser           *connect.Client[user.EnrollMachineUserRequest, user.EnrollMachineUserResponse]
	createProject               *connect.Client[user.CreateProjectRequest, user.CreateProjectResponse]
	deleteProject               *connect.Client[user.DeleteProjectRequest, user.DeleteProjectResponse]
	createOrganization          *connect.Client[user.CreateOrganizationRequest, user.CreateOrganizationResponse]
	listAllOrganizations        *connect.Client[user.ListAllOrganizationsRequest, user.ListAllOrganizationsResponse]
	deleteOrganization          *connect.Client[user.DeleteOrganizationRequest, user.DeleteOrganizationResponse]
	addUsersToOrganization      *connect.Client[user.AddUsersToOrganizationRequest, user.AddUsersToOrganizationResponse]
	removeUsersFromOrganization *connect.Client[user.RemoveUsersFromOrganizationRequest, user.RemoveUsersFromOrganizationResponse]
}

// Whoami calls stately.User.Whoami.
func (c *userClient) Whoami(ctx context.Context, req *connect.Request[user.WhoamiRequest]) (*connect.Response[user.WhoamiResponse], error) {
	return c.whoami.CallUnary(ctx, req)
}

// GetCallerIdentity calls stately.User.GetCallerIdentity.
func (c *userClient) GetCallerIdentity(ctx context.Context, req *connect.Request[user.GetCallerIdentityRequest]) (*connect.Response[user.GetCallerIdentityResponse], error) {
	return c.getCallerIdentity.CallUnary(ctx, req)
}

// Enroll calls stately.User.Enroll.
func (c *userClient) Enroll(ctx context.Context, req *connect.Request[user.EnrollRequest]) (*connect.Response[user.EnrollResponse], error) {
	return c.enroll.CallUnary(ctx, req)
}

// EnrollMachineUser calls stately.User.EnrollMachineUser.
func (c *userClient) EnrollMachineUser(ctx context.Context, req *connect.Request[user.EnrollMachineUserRequest]) (*connect.Response[user.EnrollMachineUserResponse], error) {
	return c.enrollMachineUser.CallUnary(ctx, req)
}

// CreateProject calls stately.User.CreateProject.
func (c *userClient) CreateProject(ctx context.Context, req *connect.Request[user.CreateProjectRequest]) (*connect.Response[user.CreateProjectResponse], error) {
	return c.createProject.CallUnary(ctx, req)
}

// DeleteProject calls stately.User.DeleteProject.
func (c *userClient) DeleteProject(ctx context.Context, req *connect.Request[user.DeleteProjectRequest]) (*connect.Response[user.DeleteProjectResponse], error) {
	return c.deleteProject.CallUnary(ctx, req)
}

// CreateOrganization calls stately.User.CreateOrganization.
func (c *userClient) CreateOrganization(ctx context.Context, req *connect.Request[user.CreateOrganizationRequest]) (*connect.Response[user.CreateOrganizationResponse], error) {
	return c.createOrganization.CallUnary(ctx, req)
}

// ListAllOrganizations calls stately.User.ListAllOrganizations.
func (c *userClient) ListAllOrganizations(ctx context.Context, req *connect.Request[user.ListAllOrganizationsRequest]) (*connect.Response[user.ListAllOrganizationsResponse], error) {
	return c.listAllOrganizations.CallUnary(ctx, req)
}

// DeleteOrganization calls stately.User.DeleteOrganization.
func (c *userClient) DeleteOrganization(ctx context.Context, req *connect.Request[user.DeleteOrganizationRequest]) (*connect.Response[user.DeleteOrganizationResponse], error) {
	return c.deleteOrganization.CallUnary(ctx, req)
}

// AddUsersToOrganization calls stately.User.AddUsersToOrganization.
func (c *userClient) AddUsersToOrganization(ctx context.Context, req *connect.Request[user.AddUsersToOrganizationRequest]) (*connect.Response[user.AddUsersToOrganizationResponse], error) {
	return c.addUsersToOrganization.CallUnary(ctx, req)
}

// RemoveUsersFromOrganization calls stately.User.RemoveUsersFromOrganization.
func (c *userClient) RemoveUsersFromOrganization(ctx context.Context, req *connect.Request[user.RemoveUsersFromOrganizationRequest]) (*connect.Response[user.RemoveUsersFromOrganizationResponse], error) {
	return c.removeUsersFromOrganization.CallUnary(ctx, req)
}

// UserHandler is an implementation of the stately.User service.
type UserHandler interface {
	// Whoami returns information about the user that calls it (based on the auth
	// token). This includes information about what organizations the user belongs
	// to, what projects they have access to, what roles(?) they can use, etc.
	// This is meant to be called from the Web Console or CLI in order to populate
	// some basic information in the UI and allow calling other APIs like
	// ListStores. It will return a NotFound error if the user does not exist -
	// you can call Enroll to create the user and then try again.
	Whoami(context.Context, *connect.Request[user.WhoamiRequest]) (*connect.Response[user.WhoamiResponse], error)
	// GetCallerIdentity returns the Stately UserID of the caller.
	// This simple API is meant for testing execution environments to ensure that the
	// client is correctly authenticated.
	// If the caller is not enrolled in Stately then NotFound will be returned.
	GetCallerIdentity(context.Context, *connect.Request[user.GetCallerIdentityRequest]) (*connect.Response[user.GetCallerIdentityResponse], error)
	// Enroll bootstraps a new User given a service principal ID from an auth
	// provider. This includes creating a user record for them, and a default
	// organization, project, and store for them to use. User information is
	// automatically read from the auth token.
	Enroll(context.Context, *connect.Request[user.EnrollRequest]) (*connect.Response[user.EnrollResponse], error)
	// EnrollMachineUser bootstraps a new machine user principal ID from an auth
	// provider and enrolls them in the organization ID which was passed in the
	// request. Once a machine user has been enrolled in one organization, it
	// cannot be in any other organization unless it is removed from the first
	// one. ** THIS IS AN ADMIN ONLY API **
	EnrollMachineUser(context.Context, *connect.Request[user.EnrollMachineUserRequest]) (*connect.Response[user.EnrollMachineUserResponse], error)
	// CreateProject makes a new project within an organization. It will fail if
	// the project already exists or you don't have permission to create projects
	// in that organization.
	CreateProject(context.Context, *connect.Request[user.CreateProjectRequest]) (*connect.Response[user.CreateProjectResponse], error)
	// DeleteProject schedules a project to be deleted, including all data within it.
	// This operation takes some time so it returns a handle to an operation that
	// you can check to see if it is complete. This will fail if the project does
	// not exist, if the project is already being deleted, or if you do not have
	// permission to delete project.
	DeleteProject(context.Context, *connect.Request[user.DeleteProjectRequest]) (*connect.Response[user.DeleteProjectResponse], error)
	// CreateOrganization makes a new organization, optionally including the
	// current user as a member. It will fail if you don't have permission to
	// create organizations. Note that it is currently possible to create multiple
	// orgs with the same name.
	CreateOrganization(context.Context, *connect.Request[user.CreateOrganizationRequest]) (*connect.Response[user.CreateOrganizationResponse], error)
	// ListAllOrganizations lists all the organizations registered with Stately.
	// It will fail if you don't have permission to list all organizations (only
	// admins have this). This includes information about all the members and
	// resources in each organization.
	ListAllOrganizations(context.Context, *connect.Request[user.ListAllOrganizationsRequest]) (*connect.Response[user.ListAllOrganizationsResponse], error)
	// DeleteOrganization deletes an organization, including all data within it.
	// This will fail if the organization does not exist, or if you do not have
	// permission to delete the organization. It is safe to retry this operation.
	DeleteOrganization(context.Context, *connect.Request[user.DeleteOrganizationRequest]) (*connect.Response[user.DeleteOrganizationResponse], error)
	// AddUsersToOrganization adds users to an organization. This will fail if the
	// organization does not exist, or if you do not have permission to update the
	// organization. It is a noop if the user is already in the organization.
	AddUsersToOrganization(context.Context, *connect.Request[user.AddUsersToOrganizationRequest]) (*connect.Response[user.AddUsersToOrganizationResponse], error)
	// RemoveUsersFromOrganization removes users from an organization. This will
	// fail if the organization does not exist, or if you do not have permission
	// to update the organization. It is a noop if the user is not in the
	// organization.
	RemoveUsersFromOrganization(context.Context, *connect.Request[user.RemoveUsersFromOrganizationRequest]) (*connect.Response[user.RemoveUsersFromOrganizationResponse], error)
}

// NewUserHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserHandler(svc UserHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userWhoamiHandler := connect.NewUnaryHandler(
		UserWhoamiProcedure,
		svc.Whoami,
		connect.WithSchema(userWhoamiMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	userGetCallerIdentityHandler := connect.NewUnaryHandler(
		UserGetCallerIdentityProcedure,
		svc.GetCallerIdentity,
		connect.WithSchema(userGetCallerIdentityMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	userEnrollHandler := connect.NewUnaryHandler(
		UserEnrollProcedure,
		svc.Enroll,
		connect.WithSchema(userEnrollMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	userEnrollMachineUserHandler := connect.NewUnaryHandler(
		UserEnrollMachineUserProcedure,
		svc.EnrollMachineUser,
		connect.WithSchema(userEnrollMachineUserMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	userCreateProjectHandler := connect.NewUnaryHandler(
		UserCreateProjectProcedure,
		svc.CreateProject,
		connect.WithSchema(userCreateProjectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userDeleteProjectHandler := connect.NewUnaryHandler(
		UserDeleteProjectProcedure,
		svc.DeleteProject,
		connect.WithSchema(userDeleteProjectMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	userCreateOrganizationHandler := connect.NewUnaryHandler(
		UserCreateOrganizationProcedure,
		svc.CreateOrganization,
		connect.WithSchema(userCreateOrganizationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userListAllOrganizationsHandler := connect.NewUnaryHandler(
		UserListAllOrganizationsProcedure,
		svc.ListAllOrganizations,
		connect.WithSchema(userListAllOrganizationsMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	userDeleteOrganizationHandler := connect.NewUnaryHandler(
		UserDeleteOrganizationProcedure,
		svc.DeleteOrganization,
		connect.WithSchema(userDeleteOrganizationMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	userAddUsersToOrganizationHandler := connect.NewUnaryHandler(
		UserAddUsersToOrganizationProcedure,
		svc.AddUsersToOrganization,
		connect.WithSchema(userAddUsersToOrganizationMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	userRemoveUsersFromOrganizationHandler := connect.NewUnaryHandler(
		UserRemoveUsersFromOrganizationProcedure,
		svc.RemoveUsersFromOrganization,
		connect.WithSchema(userRemoveUsersFromOrganizationMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	return "/stately.User/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserWhoamiProcedure:
			userWhoamiHandler.ServeHTTP(w, r)
		case UserGetCallerIdentityProcedure:
			userGetCallerIdentityHandler.ServeHTTP(w, r)
		case UserEnrollProcedure:
			userEnrollHandler.ServeHTTP(w, r)
		case UserEnrollMachineUserProcedure:
			userEnrollMachineUserHandler.ServeHTTP(w, r)
		case UserCreateProjectProcedure:
			userCreateProjectHandler.ServeHTTP(w, r)
		case UserDeleteProjectProcedure:
			userDeleteProjectHandler.ServeHTTP(w, r)
		case UserCreateOrganizationProcedure:
			userCreateOrganizationHandler.ServeHTTP(w, r)
		case UserListAllOrganizationsProcedure:
			userListAllOrganizationsHandler.ServeHTTP(w, r)
		case UserDeleteOrganizationProcedure:
			userDeleteOrganizationHandler.ServeHTTP(w, r)
		case UserAddUsersToOrganizationProcedure:
			userAddUsersToOrganizationHandler.ServeHTTP(w, r)
		case UserRemoveUsersFromOrganizationProcedure:
			userRemoveUsersFromOrganizationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserHandler returns CodeUnimplemented from all methods.
type UnimplementedUserHandler struct{}

func (UnimplementedUserHandler) Whoami(context.Context, *connect.Request[user.WhoamiRequest]) (*connect.Response[user.WhoamiResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stately.User.Whoami is not implemented"))
}

func (UnimplementedUserHandler) GetCallerIdentity(context.Context, *connect.Request[user.GetCallerIdentityRequest]) (*connect.Response[user.GetCallerIdentityResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stately.User.GetCallerIdentity is not implemented"))
}

func (UnimplementedUserHandler) Enroll(context.Context, *connect.Request[user.EnrollRequest]) (*connect.Response[user.EnrollResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stately.User.Enroll is not implemented"))
}

func (UnimplementedUserHandler) EnrollMachineUser(context.Context, *connect.Request[user.EnrollMachineUserRequest]) (*connect.Response[user.EnrollMachineUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stately.User.EnrollMachineUser is not implemented"))
}

func (UnimplementedUserHandler) CreateProject(context.Context, *connect.Request[user.CreateProjectRequest]) (*connect.Response[user.CreateProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stately.User.CreateProject is not implemented"))
}

func (UnimplementedUserHandler) DeleteProject(context.Context, *connect.Request[user.DeleteProjectRequest]) (*connect.Response[user.DeleteProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stately.User.DeleteProject is not implemented"))
}

func (UnimplementedUserHandler) CreateOrganization(context.Context, *connect.Request[user.CreateOrganizationRequest]) (*connect.Response[user.CreateOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stately.User.CreateOrganization is not implemented"))
}

func (UnimplementedUserHandler) ListAllOrganizations(context.Context, *connect.Request[user.ListAllOrganizationsRequest]) (*connect.Response[user.ListAllOrganizationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stately.User.ListAllOrganizations is not implemented"))
}

func (UnimplementedUserHandler) DeleteOrganization(context.Context, *connect.Request[user.DeleteOrganizationRequest]) (*connect.Response[user.DeleteOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stately.User.DeleteOrganization is not implemented"))
}

func (UnimplementedUserHandler) AddUsersToOrganization(context.Context, *connect.Request[user.AddUsersToOrganizationRequest]) (*connect.Response[user.AddUsersToOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stately.User.AddUsersToOrganization is not implemented"))
}

func (UnimplementedUserHandler) RemoveUsersFromOrganization(context.Context, *connect.Request[user.RemoveUsersFromOrganizationRequest]) (*connect.Response[user.RemoveUsersFromOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stately.User.RemoveUsersFromOrganization is not implemented"))
}
