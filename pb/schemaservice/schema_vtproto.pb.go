// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.6.0
// source: schemaservice/schema.proto

package schemaservice

import (
	fmt "fmt"
	protohelpers "github.com/planetscale/vtprotobuf/protohelpers"
	proto "google.golang.org/protobuf/proto"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	io "io"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

func (m *SchemaModel) CloneVT() *SchemaModel {
	if m == nil {
		return (*SchemaModel)(nil)
	}
	r := new(SchemaModel)
	r.LastModifiedAtMicros = m.LastModifiedAtMicros
	r.CreatedAtMicros = m.CreatedAtMicros
	r.FormattedSchema = m.FormattedSchema
	r.SchemaVersionId = m.SchemaVersionId
	r.SchemaId = m.SchemaId
	if rhs := m.FileDescriptor; rhs != nil {
		if vtpb, ok := interface{}(rhs).(interface {
			CloneVT() *descriptorpb.FileDescriptorProto
		}); ok {
			r.FileDescriptor = vtpb.CloneVT()
		} else {
			r.FileDescriptor = proto.Clone(rhs).(*descriptorpb.FileDescriptorProto)
		}
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *SchemaModel) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (this *SchemaModel) EqualVT(that *SchemaModel) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if equal, ok := interface{}(this.FileDescriptor).(interface {
		EqualVT(*descriptorpb.FileDescriptorProto) bool
	}); ok {
		if !equal.EqualVT(that.FileDescriptor) {
			return false
		}
	} else if !proto.Equal(this.FileDescriptor, that.FileDescriptor) {
		return false
	}
	if this.LastModifiedAtMicros != that.LastModifiedAtMicros {
		return false
	}
	if this.CreatedAtMicros != that.CreatedAtMicros {
		return false
	}
	if this.FormattedSchema != that.FormattedSchema {
		return false
	}
	if this.SchemaVersionId != that.SchemaVersionId {
		return false
	}
	if this.SchemaId != that.SchemaId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *SchemaModel) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*SchemaModel)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (m *SchemaModel) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchemaModel) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *SchemaModel) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.SchemaId != 0 {
		i = protohelpers.EncodeVarint(dAtA, i, uint64(m.SchemaId))
		i--
		dAtA[i] = 0x30
	}
	if m.SchemaVersionId != 0 {
		i = protohelpers.EncodeVarint(dAtA, i, uint64(m.SchemaVersionId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.FormattedSchema) > 0 {
		i -= len(m.FormattedSchema)
		copy(dAtA[i:], m.FormattedSchema)
		i = protohelpers.EncodeVarint(dAtA, i, uint64(len(m.FormattedSchema)))
		i--
		dAtA[i] = 0x22
	}
	if m.CreatedAtMicros != 0 {
		i = protohelpers.EncodeVarint(dAtA, i, uint64(m.CreatedAtMicros))
		i--
		dAtA[i] = 0x18
	}
	if m.LastModifiedAtMicros != 0 {
		i = protohelpers.EncodeVarint(dAtA, i, uint64(m.LastModifiedAtMicros))
		i--
		dAtA[i] = 0x10
	}
	if m.FileDescriptor != nil {
		if vtmsg, ok := interface{}(m.FileDescriptor).(interface {
			MarshalToSizedBufferVT([]byte) (int, error)
		}); ok {
			size, err := vtmsg.MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		} else {
			encoded, err := proto.Marshal(m.FileDescriptor)
			if err != nil {
				return 0, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = protohelpers.EncodeVarint(dAtA, i, uint64(len(encoded)))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SchemaModel) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FileDescriptor != nil {
		if size, ok := interface{}(m.FileDescriptor).(interface {
			SizeVT() int
		}); ok {
			l = size.SizeVT()
		} else {
			l = proto.Size(m.FileDescriptor)
		}
		n += 1 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	if m.LastModifiedAtMicros != 0 {
		n += 1 + protohelpers.SizeOfVarint(uint64(m.LastModifiedAtMicros))
	}
	if m.CreatedAtMicros != 0 {
		n += 1 + protohelpers.SizeOfVarint(uint64(m.CreatedAtMicros))
	}
	l = len(m.FormattedSchema)
	if l > 0 {
		n += 1 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	if m.SchemaVersionId != 0 {
		n += 1 + protohelpers.SizeOfVarint(uint64(m.SchemaVersionId))
	}
	if m.SchemaId != 0 {
		n += 1 + protohelpers.SizeOfVarint(uint64(m.SchemaId))
	}
	n += len(m.unknownFields)
	return n
}

func (m *SchemaModel) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protohelpers.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchemaModel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchemaModel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileDescriptor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FileDescriptor == nil {
				m.FileDescriptor = &descriptorpb.FileDescriptorProto{}
			}
			if unmarshal, ok := interface{}(m.FileDescriptor).(interface {
				UnmarshalVT([]byte) error
			}); ok {
				if err := unmarshal.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				if err := proto.Unmarshal(dAtA[iNdEx:postIndex], m.FileDescriptor); err != nil {
					return err
				}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastModifiedAtMicros", wireType)
			}
			m.LastModifiedAtMicros = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastModifiedAtMicros |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAtMicros", wireType)
			}
			m.CreatedAtMicros = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAtMicros |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FormattedSchema", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FormattedSchema = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaVersionId", wireType)
			}
			m.SchemaVersionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchemaVersionId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaId", wireType)
			}
			m.SchemaId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchemaId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := protohelpers.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protohelpers.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
