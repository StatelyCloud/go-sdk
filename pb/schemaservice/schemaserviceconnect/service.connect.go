// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: schemaservice/service.proto

package schemaserviceconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	schemaservice "github.com/StatelyCloud/go-sdk/pb/schemaservice"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SchemaServiceName is the fully-qualified name of the SchemaService service.
	SchemaServiceName = "stately.schemaservice.SchemaService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SchemaServicePutProcedure is the fully-qualified name of the SchemaService's Put RPC.
	SchemaServicePutProcedure = "/stately.schemaservice.SchemaService/Put"
	// SchemaServiceValidateProcedure is the fully-qualified name of the SchemaService's Validate RPC.
	SchemaServiceValidateProcedure = "/stately.schemaservice.SchemaService/Validate"
	// SchemaServiceGetProcedure is the fully-qualified name of the SchemaService's Get RPC.
	SchemaServiceGetProcedure = "/stately.schemaservice.SchemaService/Get"
	// SchemaServiceDeleteProcedure is the fully-qualified name of the SchemaService's Delete RPC.
	SchemaServiceDeleteProcedure = "/stately.schemaservice.SchemaService/Delete"
	// SchemaServiceListAuditLogProcedure is the fully-qualified name of the SchemaService's
	// ListAuditLog RPC.
	SchemaServiceListAuditLogProcedure = "/stately.schemaservice.SchemaService/ListAuditLog"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	schemaServiceServiceDescriptor            = schemaservice.File_schemaservice_service_proto.Services().ByName("SchemaService")
	schemaServicePutMethodDescriptor          = schemaServiceServiceDescriptor.Methods().ByName("Put")
	schemaServiceValidateMethodDescriptor     = schemaServiceServiceDescriptor.Methods().ByName("Validate")
	schemaServiceGetMethodDescriptor          = schemaServiceServiceDescriptor.Methods().ByName("Get")
	schemaServiceDeleteMethodDescriptor       = schemaServiceServiceDescriptor.Methods().ByName("Delete")
	schemaServiceListAuditLogMethodDescriptor = schemaServiceServiceDescriptor.Methods().ByName("ListAuditLog")
)

// SchemaServiceClient is a client for the stately.schemaservice.SchemaService service.
type SchemaServiceClient interface {
	// Put adds a Schema to the StatelyDB Schema Store or replaces the Schema if
	// it already exists. If the caller attempts to put a Schema for a Store that
	// does not exist the request will fail. If the caller does not have
	// permissions to access the Store the request will fail. If the Schema is not
	// valid the request will fail. If a Schema already exists for the Store then
	// the update will only be accepted if the new Schema is backwards compatible
	// with the existing Schema. If the schema is invalid the response will
	// contain a list of individual validation errors.
	Put(context.Context, *connect.Request[schemaservice.PutRequest]) (*connect.Response[schemaservice.PutResponse], error)
	// Validate runs all of Stately's semantic validations on the provided Schema.
	// This is helpful for validating a stand alone Schema file for iterative
	// feedback. This is different than a PutRequest in dry_run mode as it does
	// not check for backwards compatibility with the existing Schema and thus
	// does not require a store_id or permissions. If the schema is invalid the
	// response will contain a list of individual validation errors.
	Validate(context.Context, *connect.Request[schemaservice.ValidateRequest]) (*connect.Response[schemaservice.ValidateResponse], error)
	// Get retrieves the fully self-contained Schema for the corresponding Store
	// ID. There is only one Schema per Store so the result of this call will
	// contain the most up-to-date representation of the Items in the Store. It
	// will fail if the caller does not have permission the Store.
	Get(context.Context, *connect.Request[schemaservice.GetRequest]) (*connect.Response[schemaservice.GetResponse], error)
	// Delete deletes the Schema for the corresponding Store ID.
	// This is an unsafe operation and can only be performed by an admin user.
	Delete(context.Context, *connect.Request[schemaservice.DeleteRequest]) (*connect.Response[schemaservice.DeleteResponse], error)
	// ListAuditLog retrieves the audit log for the Schema associated with the provided Store ID.
	// The audit log consists of a list of audit log entries that represent each change to the Schema including
	// its creation.
	ListAuditLog(context.Context, *connect.Request[schemaservice.ListAuditLogRequest]) (*connect.Response[schemaservice.ListAuditLogResponse], error)
}

// NewSchemaServiceClient constructs a client for the stately.schemaservice.SchemaService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSchemaServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SchemaServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &schemaServiceClient{
		put: connect.NewClient[schemaservice.PutRequest, schemaservice.PutResponse](
			httpClient,
			baseURL+SchemaServicePutProcedure,
			connect.WithSchema(schemaServicePutMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
		validate: connect.NewClient[schemaservice.ValidateRequest, schemaservice.ValidateResponse](
			httpClient,
			baseURL+SchemaServiceValidateProcedure,
			connect.WithSchema(schemaServiceValidateMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[schemaservice.GetRequest, schemaservice.GetResponse](
			httpClient,
			baseURL+SchemaServiceGetProcedure,
			connect.WithSchema(schemaServiceGetMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[schemaservice.DeleteRequest, schemaservice.DeleteResponse](
			httpClient,
			baseURL+SchemaServiceDeleteProcedure,
			connect.WithSchema(schemaServiceDeleteMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
		listAuditLog: connect.NewClient[schemaservice.ListAuditLogRequest, schemaservice.ListAuditLogResponse](
			httpClient,
			baseURL+SchemaServiceListAuditLogProcedure,
			connect.WithSchema(schemaServiceListAuditLogMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// schemaServiceClient implements SchemaServiceClient.
type schemaServiceClient struct {
	put          *connect.Client[schemaservice.PutRequest, schemaservice.PutResponse]
	validate     *connect.Client[schemaservice.ValidateRequest, schemaservice.ValidateResponse]
	get          *connect.Client[schemaservice.GetRequest, schemaservice.GetResponse]
	delete       *connect.Client[schemaservice.DeleteRequest, schemaservice.DeleteResponse]
	listAuditLog *connect.Client[schemaservice.ListAuditLogRequest, schemaservice.ListAuditLogResponse]
}

// Put calls stately.schemaservice.SchemaService.Put.
func (c *schemaServiceClient) Put(ctx context.Context, req *connect.Request[schemaservice.PutRequest]) (*connect.Response[schemaservice.PutResponse], error) {
	return c.put.CallUnary(ctx, req)
}

// Validate calls stately.schemaservice.SchemaService.Validate.
func (c *schemaServiceClient) Validate(ctx context.Context, req *connect.Request[schemaservice.ValidateRequest]) (*connect.Response[schemaservice.ValidateResponse], error) {
	return c.validate.CallUnary(ctx, req)
}

// Get calls stately.schemaservice.SchemaService.Get.
func (c *schemaServiceClient) Get(ctx context.Context, req *connect.Request[schemaservice.GetRequest]) (*connect.Response[schemaservice.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// Delete calls stately.schemaservice.SchemaService.Delete.
func (c *schemaServiceClient) Delete(ctx context.Context, req *connect.Request[schemaservice.DeleteRequest]) (*connect.Response[schemaservice.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// ListAuditLog calls stately.schemaservice.SchemaService.ListAuditLog.
func (c *schemaServiceClient) ListAuditLog(ctx context.Context, req *connect.Request[schemaservice.ListAuditLogRequest]) (*connect.Response[schemaservice.ListAuditLogResponse], error) {
	return c.listAuditLog.CallUnary(ctx, req)
}

// SchemaServiceHandler is an implementation of the stately.schemaservice.SchemaService service.
type SchemaServiceHandler interface {
	// Put adds a Schema to the StatelyDB Schema Store or replaces the Schema if
	// it already exists. If the caller attempts to put a Schema for a Store that
	// does not exist the request will fail. If the caller does not have
	// permissions to access the Store the request will fail. If the Schema is not
	// valid the request will fail. If a Schema already exists for the Store then
	// the update will only be accepted if the new Schema is backwards compatible
	// with the existing Schema. If the schema is invalid the response will
	// contain a list of individual validation errors.
	Put(context.Context, *connect.Request[schemaservice.PutRequest]) (*connect.Response[schemaservice.PutResponse], error)
	// Validate runs all of Stately's semantic validations on the provided Schema.
	// This is helpful for validating a stand alone Schema file for iterative
	// feedback. This is different than a PutRequest in dry_run mode as it does
	// not check for backwards compatibility with the existing Schema and thus
	// does not require a store_id or permissions. If the schema is invalid the
	// response will contain a list of individual validation errors.
	Validate(context.Context, *connect.Request[schemaservice.ValidateRequest]) (*connect.Response[schemaservice.ValidateResponse], error)
	// Get retrieves the fully self-contained Schema for the corresponding Store
	// ID. There is only one Schema per Store so the result of this call will
	// contain the most up-to-date representation of the Items in the Store. It
	// will fail if the caller does not have permission the Store.
	Get(context.Context, *connect.Request[schemaservice.GetRequest]) (*connect.Response[schemaservice.GetResponse], error)
	// Delete deletes the Schema for the corresponding Store ID.
	// This is an unsafe operation and can only be performed by an admin user.
	Delete(context.Context, *connect.Request[schemaservice.DeleteRequest]) (*connect.Response[schemaservice.DeleteResponse], error)
	// ListAuditLog retrieves the audit log for the Schema associated with the provided Store ID.
	// The audit log consists of a list of audit log entries that represent each change to the Schema including
	// its creation.
	ListAuditLog(context.Context, *connect.Request[schemaservice.ListAuditLogRequest]) (*connect.Response[schemaservice.ListAuditLogResponse], error)
}

// NewSchemaServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSchemaServiceHandler(svc SchemaServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	schemaServicePutHandler := connect.NewUnaryHandler(
		SchemaServicePutProcedure,
		svc.Put,
		connect.WithSchema(schemaServicePutMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	schemaServiceValidateHandler := connect.NewUnaryHandler(
		SchemaServiceValidateProcedure,
		svc.Validate,
		connect.WithSchema(schemaServiceValidateMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	schemaServiceGetHandler := connect.NewUnaryHandler(
		SchemaServiceGetProcedure,
		svc.Get,
		connect.WithSchema(schemaServiceGetMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	schemaServiceDeleteHandler := connect.NewUnaryHandler(
		SchemaServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(schemaServiceDeleteMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	schemaServiceListAuditLogHandler := connect.NewUnaryHandler(
		SchemaServiceListAuditLogProcedure,
		svc.ListAuditLog,
		connect.WithSchema(schemaServiceListAuditLogMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/stately.schemaservice.SchemaService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SchemaServicePutProcedure:
			schemaServicePutHandler.ServeHTTP(w, r)
		case SchemaServiceValidateProcedure:
			schemaServiceValidateHandler.ServeHTTP(w, r)
		case SchemaServiceGetProcedure:
			schemaServiceGetHandler.ServeHTTP(w, r)
		case SchemaServiceDeleteProcedure:
			schemaServiceDeleteHandler.ServeHTTP(w, r)
		case SchemaServiceListAuditLogProcedure:
			schemaServiceListAuditLogHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSchemaServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSchemaServiceHandler struct{}

func (UnimplementedSchemaServiceHandler) Put(context.Context, *connect.Request[schemaservice.PutRequest]) (*connect.Response[schemaservice.PutResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stately.schemaservice.SchemaService.Put is not implemented"))
}

func (UnimplementedSchemaServiceHandler) Validate(context.Context, *connect.Request[schemaservice.ValidateRequest]) (*connect.Response[schemaservice.ValidateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stately.schemaservice.SchemaService.Validate is not implemented"))
}

func (UnimplementedSchemaServiceHandler) Get(context.Context, *connect.Request[schemaservice.GetRequest]) (*connect.Response[schemaservice.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stately.schemaservice.SchemaService.Get is not implemented"))
}

func (UnimplementedSchemaServiceHandler) Delete(context.Context, *connect.Request[schemaservice.DeleteRequest]) (*connect.Response[schemaservice.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stately.schemaservice.SchemaService.Delete is not implemented"))
}

func (UnimplementedSchemaServiceHandler) ListAuditLog(context.Context, *connect.Request[schemaservice.ListAuditLogRequest]) (*connect.Response[schemaservice.ListAuditLogResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stately.schemaservice.SchemaService.ListAuditLog is not implemented"))
}
