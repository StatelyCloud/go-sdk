// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: dbmanagement/service.proto

package dbmanagementconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	dbmanagement "github.com/StatelyCloud/go-sdk/pb/dbmanagement"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ManagementName is the fully-qualified name of the Management service.
	ManagementName = "stately.Management"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ManagementCreateStoreProcedure is the fully-qualified name of the Management's CreateStore RPC.
	ManagementCreateStoreProcedure = "/stately.Management/CreateStore"
	// ManagementDeleteStoreProcedure is the fully-qualified name of the Management's DeleteStore RPC.
	ManagementDeleteStoreProcedure = "/stately.Management/DeleteStore"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	managementServiceDescriptor           = dbmanagement.File_dbmanagement_service_proto.Services().ByName("Management")
	managementCreateStoreMethodDescriptor = managementServiceDescriptor.Methods().ByName("CreateStore")
	managementDeleteStoreMethodDescriptor = managementServiceDescriptor.Methods().ByName("DeleteStore")
)

// ManagementClient is a client for the stately.Management service.
type ManagementClient interface {
	// CreateStore makes a new store within your project. It will fail if you
	// don't have permission to create stores in that project.
	CreateStore(context.Context, *connect.Request[dbmanagement.CreateStoreRequest]) (*connect.Response[dbmanagement.CreateStoreResponse], error)
	// DeleteStore schedules a store to be deleted, including all data within it.
	// This operation takes some time so it returns a handle to an operation that
	// you can check to see if it is complete. This will fail if the store does
	// not exist, if the store is already being deleted, or if you do not have
	// permission to delete stores.
	DeleteStore(context.Context, *connect.Request[dbmanagement.DeleteStoreRequest]) (*connect.Response[dbmanagement.DeleteStoreResponse], error)
}

// NewManagementClient constructs a client for the stately.Management service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewManagementClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ManagementClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &managementClient{
		createStore: connect.NewClient[dbmanagement.CreateStoreRequest, dbmanagement.CreateStoreResponse](
			httpClient,
			baseURL+ManagementCreateStoreProcedure,
			connect.WithSchema(managementCreateStoreMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteStore: connect.NewClient[dbmanagement.DeleteStoreRequest, dbmanagement.DeleteStoreResponse](
			httpClient,
			baseURL+ManagementDeleteStoreProcedure,
			connect.WithSchema(managementDeleteStoreMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
	}
}

// managementClient implements ManagementClient.
type managementClient struct {
	createStore *connect.Client[dbmanagement.CreateStoreRequest, dbmanagement.CreateStoreResponse]
	deleteStore *connect.Client[dbmanagement.DeleteStoreRequest, dbmanagement.DeleteStoreResponse]
}

// CreateStore calls stately.Management.CreateStore.
func (c *managementClient) CreateStore(ctx context.Context, req *connect.Request[dbmanagement.CreateStoreRequest]) (*connect.Response[dbmanagement.CreateStoreResponse], error) {
	return c.createStore.CallUnary(ctx, req)
}

// DeleteStore calls stately.Management.DeleteStore.
func (c *managementClient) DeleteStore(ctx context.Context, req *connect.Request[dbmanagement.DeleteStoreRequest]) (*connect.Response[dbmanagement.DeleteStoreResponse], error) {
	return c.deleteStore.CallUnary(ctx, req)
}

// ManagementHandler is an implementation of the stately.Management service.
type ManagementHandler interface {
	// CreateStore makes a new store within your project. It will fail if you
	// don't have permission to create stores in that project.
	CreateStore(context.Context, *connect.Request[dbmanagement.CreateStoreRequest]) (*connect.Response[dbmanagement.CreateStoreResponse], error)
	// DeleteStore schedules a store to be deleted, including all data within it.
	// This operation takes some time so it returns a handle to an operation that
	// you can check to see if it is complete. This will fail if the store does
	// not exist, if the store is already being deleted, or if you do not have
	// permission to delete stores.
	DeleteStore(context.Context, *connect.Request[dbmanagement.DeleteStoreRequest]) (*connect.Response[dbmanagement.DeleteStoreResponse], error)
}

// NewManagementHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewManagementHandler(svc ManagementHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	managementCreateStoreHandler := connect.NewUnaryHandler(
		ManagementCreateStoreProcedure,
		svc.CreateStore,
		connect.WithSchema(managementCreateStoreMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	managementDeleteStoreHandler := connect.NewUnaryHandler(
		ManagementDeleteStoreProcedure,
		svc.DeleteStore,
		connect.WithSchema(managementDeleteStoreMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	return "/stately.Management/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ManagementCreateStoreProcedure:
			managementCreateStoreHandler.ServeHTTP(w, r)
		case ManagementDeleteStoreProcedure:
			managementDeleteStoreHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedManagementHandler returns CodeUnimplemented from all methods.
type UnimplementedManagementHandler struct{}

func (UnimplementedManagementHandler) CreateStore(context.Context, *connect.Request[dbmanagement.CreateStoreRequest]) (*connect.Response[dbmanagement.CreateStoreResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stately.Management.CreateStore is not implemented"))
}

func (UnimplementedManagementHandler) DeleteStore(context.Context, *connect.Request[dbmanagement.DeleteStoreRequest]) (*connect.Response[dbmanagement.DeleteStoreResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stately.Management.DeleteStore is not implemented"))
}
