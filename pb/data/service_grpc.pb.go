// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: data/service.proto

package data

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Data_Put_FullMethodName           = "/stately.Data/Put"
	Data_Get_FullMethodName           = "/stately.Data/Get"
	Data_Delete_FullMethodName        = "/stately.Data/Delete"
	Data_Append_FullMethodName        = "/stately.Data/Append"
	Data_Query_FullMethodName         = "/stately.Data/Query"
	Data_ScanRootPaths_FullMethodName = "/stately.Data/ScanRootPaths"
)

// DataClient is the client API for Data service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataClient interface {
	// Put adds one or more Items to the Store, or replaces the Items if they
	// already exist at that path. This will fail if not all of the PutItem
	// requests are under the same root item path, if any of the PutItem requests'
	// write conditions fails, or if the caller does not have permission to create
	// Items. All puts in the request are applied atomically - there are no
	// partial successes. Data can be provided as either JSON, or as a proto
	// encoded by a previously agreed upon schema, or by some combination of the
	// two.
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)
	// Get retrieves one or more Items by their full key paths. This will return
	// any of the Items that exist. It will fail if not all of the GetItem
	// requests are under the same root item path, or if the caller does not have
	// permission to read Items. Use Query if you want to retrieve multiple items
	// but don't already know the full key paths of the items you want to get.
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// Delete removes one or more Items from the Store by their full key paths.
	// This will fail if any Item does not exist, if not all of the DeleteItem
	// requests are under the same root item path, or if the caller does not have
	// permission to delete Items. Tombstones will be left for deleted items for
	// some predetermined time (TBD tombstone behavior). All deletes in the
	// request are applied atomically - there are no partial successes.
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	// Append appends one or more Items to a parent path, automatically assigning
	// monotonically increasing integer IDs on a per-Item-Type basis. The parent
	// path must contain at least one segment and cannot end in an ID. This
	// differs from Put specifically because of this ID assignment behavior. This
	// operation will fail if the caller does not have permission to create Items.
	Append(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendResponse, error)
	// Query loads Items that start with a specified key path, subject to
	// additional filtering. The prefix must minimally contain one segment, an
	// item type and an item ID. Query will return an empty result set if there
	// are no items matching that key prefix. It is paginated, so you may have to
	// call it repeatedly, passing a pagination token each time. This can also
	// fail if the caller does not have permission to read Items.
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	// ScanRootPaths lists root paths in the Store, subject to optional filters.
	// This may be a very expensive operation, as it must consult multiple
	// partitions that may be distributed around the world. It is provided mostly
	// for use in the web console's data browser and may thus not be exposed to
	// customers. This operation will fail if the caller does not have permission
	// to read Items.
	ScanRootPaths(ctx context.Context, in *ScanRootPathsRequest, opts ...grpc.CallOption) (*ScanRootPathsResponse, error)
}

type dataClient struct {
	cc grpc.ClientConnInterface
}

func NewDataClient(cc grpc.ClientConnInterface) DataClient {
	return &dataClient{cc}
}

func (c *dataClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := c.cc.Invoke(ctx, Data_Put_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, Data_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, Data_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) Append(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendResponse, error) {
	out := new(AppendResponse)
	err := c.cc.Invoke(ctx, Data_Append_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, Data_Query_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ScanRootPaths(ctx context.Context, in *ScanRootPathsRequest, opts ...grpc.CallOption) (*ScanRootPathsResponse, error) {
	out := new(ScanRootPathsResponse)
	err := c.cc.Invoke(ctx, Data_ScanRootPaths_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataServer is the server API for Data service.
// All implementations should embed UnimplementedDataServer
// for forward compatibility
type DataServer interface {
	// Put adds one or more Items to the Store, or replaces the Items if they
	// already exist at that path. This will fail if not all of the PutItem
	// requests are under the same root item path, if any of the PutItem requests'
	// write conditions fails, or if the caller does not have permission to create
	// Items. All puts in the request are applied atomically - there are no
	// partial successes. Data can be provided as either JSON, or as a proto
	// encoded by a previously agreed upon schema, or by some combination of the
	// two.
	Put(context.Context, *PutRequest) (*PutResponse, error)
	// Get retrieves one or more Items by their full key paths. This will return
	// any of the Items that exist. It will fail if not all of the GetItem
	// requests are under the same root item path, or if the caller does not have
	// permission to read Items. Use Query if you want to retrieve multiple items
	// but don't already know the full key paths of the items you want to get.
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// Delete removes one or more Items from the Store by their full key paths.
	// This will fail if any Item does not exist, if not all of the DeleteItem
	// requests are under the same root item path, or if the caller does not have
	// permission to delete Items. Tombstones will be left for deleted items for
	// some predetermined time (TBD tombstone behavior). All deletes in the
	// request are applied atomically - there are no partial successes.
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	// Append appends one or more Items to a parent path, automatically assigning
	// monotonically increasing integer IDs on a per-Item-Type basis. The parent
	// path must contain at least one segment and cannot end in an ID. This
	// differs from Put specifically because of this ID assignment behavior. This
	// operation will fail if the caller does not have permission to create Items.
	Append(context.Context, *AppendRequest) (*AppendResponse, error)
	// Query loads Items that start with a specified key path, subject to
	// additional filtering. The prefix must minimally contain one segment, an
	// item type and an item ID. Query will return an empty result set if there
	// are no items matching that key prefix. It is paginated, so you may have to
	// call it repeatedly, passing a pagination token each time. This can also
	// fail if the caller does not have permission to read Items.
	Query(context.Context, *QueryRequest) (*QueryResponse, error)
	// ScanRootPaths lists root paths in the Store, subject to optional filters.
	// This may be a very expensive operation, as it must consult multiple
	// partitions that may be distributed around the world. It is provided mostly
	// for use in the web console's data browser and may thus not be exposed to
	// customers. This operation will fail if the caller does not have permission
	// to read Items.
	ScanRootPaths(context.Context, *ScanRootPathsRequest) (*ScanRootPathsResponse, error)
}

// UnimplementedDataServer should be embedded to have forward compatible implementations.
type UnimplementedDataServer struct {
}

func (UnimplementedDataServer) Put(context.Context, *PutRequest) (*PutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedDataServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDataServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDataServer) Append(context.Context, *AppendRequest) (*AppendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Append not implemented")
}
func (UnimplementedDataServer) Query(context.Context, *QueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedDataServer) ScanRootPaths(context.Context, *ScanRootPathsRequest) (*ScanRootPathsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanRootPaths not implemented")
}

// UnsafeDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataServer will
// result in compilation errors.
type UnsafeDataServer interface {
	mustEmbedUnimplementedDataServer()
}

func RegisterDataServer(s grpc.ServiceRegistrar, srv DataServer) {
	s.RegisterService(&Data_ServiceDesc, srv)
}

func _Data_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_Put_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_Append_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).Append(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_Append_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).Append(ctx, req.(*AppendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_Query_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ScanRootPaths_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanRootPathsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).ScanRootPaths(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Data_ScanRootPaths_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).ScanRootPaths(ctx, req.(*ScanRootPathsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Data_ServiceDesc is the grpc.ServiceDesc for Data service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Data_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stately.Data",
	HandlerType: (*DataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _Data_Put_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Data_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Data_Delete_Handler,
		},
		{
			MethodName: "Append",
			Handler:    _Data_Append_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _Data_Query_Handler,
		},
		{
			MethodName: "ScanRootPaths",
			Handler:    _Data_ScanRootPaths_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "data/service.proto",
}
