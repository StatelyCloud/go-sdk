// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: data/service.proto

package dataconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	data "github.com/StatelyCloud/go-sdk/pb/data"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DataServiceName is the fully-qualified name of the DataService service.
	DataServiceName = "stately.data.DataService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DataServicePutProcedure is the fully-qualified name of the DataService's Put RPC.
	DataServicePutProcedure = "/stately.data.DataService/Put"
	// DataServiceGetProcedure is the fully-qualified name of the DataService's Get RPC.
	DataServiceGetProcedure = "/stately.data.DataService/Get"
	// DataServiceDeleteProcedure is the fully-qualified name of the DataService's Delete RPC.
	DataServiceDeleteProcedure = "/stately.data.DataService/Delete"
	// DataServiceAppendProcedure is the fully-qualified name of the DataService's Append RPC.
	DataServiceAppendProcedure = "/stately.data.DataService/Append"
	// DataServiceBeginListProcedure is the fully-qualified name of the DataService's BeginList RPC.
	DataServiceBeginListProcedure = "/stately.data.DataService/BeginList"
	// DataServiceContinueListProcedure is the fully-qualified name of the DataService's ContinueList
	// RPC.
	DataServiceContinueListProcedure = "/stately.data.DataService/ContinueList"
	// DataServiceSyncListProcedure is the fully-qualified name of the DataService's SyncList RPC.
	DataServiceSyncListProcedure = "/stately.data.DataService/SyncList"
	// DataServiceTransactionProcedure is the fully-qualified name of the DataService's Transaction RPC.
	DataServiceTransactionProcedure = "/stately.data.DataService/Transaction"
	// DataServiceScanRootPathsProcedure is the fully-qualified name of the DataService's ScanRootPaths
	// RPC.
	DataServiceScanRootPathsProcedure = "/stately.data.DataService/ScanRootPaths"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	dataServiceServiceDescriptor             = data.File_data_service_proto.Services().ByName("DataService")
	dataServicePutMethodDescriptor           = dataServiceServiceDescriptor.Methods().ByName("Put")
	dataServiceGetMethodDescriptor           = dataServiceServiceDescriptor.Methods().ByName("Get")
	dataServiceDeleteMethodDescriptor        = dataServiceServiceDescriptor.Methods().ByName("Delete")
	dataServiceAppendMethodDescriptor        = dataServiceServiceDescriptor.Methods().ByName("Append")
	dataServiceBeginListMethodDescriptor     = dataServiceServiceDescriptor.Methods().ByName("BeginList")
	dataServiceContinueListMethodDescriptor  = dataServiceServiceDescriptor.Methods().ByName("ContinueList")
	dataServiceSyncListMethodDescriptor      = dataServiceServiceDescriptor.Methods().ByName("SyncList")
	dataServiceTransactionMethodDescriptor   = dataServiceServiceDescriptor.Methods().ByName("Transaction")
	dataServiceScanRootPathsMethodDescriptor = dataServiceServiceDescriptor.Methods().ByName("ScanRootPaths")
)

// DataServiceClient is a client for the stately.data.DataService service.
type DataServiceClient interface {
	// Put adds one or more Items to the Store, or replaces the Items if they
	// already exist at that path. This will fail if any of the PutItem requests'
	// write conditions fails, or if the caller does not have permission to create
	// Items. Puts are always applied atomically; all will fail or all will succeed. Data
	// can be provided as either JSON, or as a proto encoded by a previously
	// agreed upon schema, or by some combination of the two.
	Put(context.Context, *connect.Request[data.PutRequest]) (*connect.Response[data.PutResponse], error)
	// Get retrieves one or more Items by their full key paths. This will return
	// any of the Items that exist. It will fail if the caller does not have
	// permission to read Items. Use Query if you want to retrieve multiple items
	// but don't already know the full key paths of the items you want to get.
	Get(context.Context, *connect.Request[data.GetRequest]) (*connect.Response[data.GetResponse], error)
	// Delete removes one or more Items from the Store by their full key paths.
	// This will fail if the caller does not have permission to delete Items. In
	// version-tracking stores, tombstones will be left for deleted items for some
	// predetermined time. Deletes are always applied atomically; all will fail or
	// all will succeed.
	Delete(context.Context, *connect.Request[data.DeleteRequest]) (*connect.Response[data.DeleteResponse], error)
	// Append adds one or more new Items to a parent path, automatically assigning
	// IDs via one of several selectable ID generation strategies (not all
	// strategies may be available to all store configurations or path types).
	// Because the ID is generated by the server, the new item is guaranteed not
	// to overwrite an existing Item. This differs from Put specifically because
	// of this ID assignment behavior, and it is recommended over Put for new
	// items where you do not want to assign IDs yourself. The assigned IDs will
	// be returned in the response. This operation will fail if the caller does
	// not have permission to create Items.
	Append(context.Context, *connect.Request[data.AppendRequest]) (*connect.Response[data.AppendResponse], error)
	// BeginList loads Items that start with a specified key path, subject to
	// additional filtering. The prefix must minimally contain a Group Key (an
	// item type and an item ID). BeginList will return an empty result set if
	// there are no items matching that key prefix. A token is returned from this
	// API that you can then pass to ContinueList to expand the result set, or to
	// SyncList to get updates within the result set. This can fail if the caller
	// does not have permission to read Items.
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	BeginList(context.Context, *connect.Request[data.BeginListRequest]) (*connect.ServerStreamForClient[data.ListResponse], error)
	// ContinueList takes the token from a BeginList call and returns the next
	// "page" of results based on the original query parameters and pagination
	// options. It has few options because it is a continuation of a previous list
	// operation. It will return a new  token which can be used for another
	// ContinueList call, and so on. The  token is the same one used by SyncList -
	// each time you call either ContinueList or SyncList, you should pass the
	// latest version of the token, and then use the new token from the result in
	// subsequent calls. You may interleave ContinueList and SyncList calls
	// however you like, but it does not make sense to make both calls in
	// parallel. Calls to ContinueList are tied to the authorization of the
	// original BeginList call, so if the original BeginList call was allowed,
	// ContinueList with its token should also be allowed.
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	ContinueList(context.Context, *connect.Request[data.ContinueListRequest]) (*connect.ServerStreamForClient[data.ListResponse], error)
	// SyncList returns all changes to Items within the result set of a previous
	// List operation. For all Items within the result set that were modified, it
	// returns the full Item at in its current state. It also returns a list of
	// Item key paths that were deleted since the last SyncList, which you should
	// reconcile with your view of items returned from previous
	// BeginList/ContinueList calls. Using this API, you can start with an initial
	// set of items from BeginList, and then stay up to date on any changes via
	// repeated SyncList requests over time. The token is the same one used by
	// ContinueList - each time you call either ContinueList or SyncList, you
	// should pass the latest version of the token, and then use the new token
	// from the result in subsequent calls. Note that if the result set has
	// already been expanded to the end (in the direction of the original
	// BeginList request), SyncList will return newly created Items. You may
	// interleave ContinueList and SyncList calls however you like, but it does
	// not make sense to make both calls in parallel. Calls to SyncList are tied
	// to the authorization of the original BeginList call, so if the original
	// BeginList call was allowed, SyncList with its token should also be allowed.
	SyncList(context.Context, *connect.Request[data.SyncListRequest]) (*connect.ServerStreamForClient[data.SyncListResponse], error)
	// Transaction performs a transaction, within which you can issue writes and
	// reads in any order, followed by a commit message. Reads are guaranteed to
	// reflect the state as of when the transaction started, and writes are
	// committed atomically. This method may fail if another transaction commits
	// before this one finishes - in that case, you should retry your transaction.
	Transaction(context.Context) *connect.BidiStreamForClient[data.TransactionRequest, data.TransactionResponse]
	// ScanRootPaths lists root paths (Groups) in the Store, subject to optional
	// filters. This may be a very expensive operation, as it must consult
	// multiple partitions that may be distributed around the world. It is
	// provided mostly for use in the web console's data browser and may not be
	// exposed to customers. This operation will fail if the caller does not have
	// permission to read Items.
	ScanRootPaths(context.Context, *connect.Request[data.ScanRootPathsRequest]) (*connect.Response[data.ScanRootPathsResponse], error)
}

// NewDataServiceClient constructs a client for the stately.data.DataService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDataServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DataServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &dataServiceClient{
		put: connect.NewClient[data.PutRequest, data.PutResponse](
			httpClient,
			baseURL+DataServicePutProcedure,
			connect.WithSchema(dataServicePutMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[data.GetRequest, data.GetResponse](
			httpClient,
			baseURL+DataServiceGetProcedure,
			connect.WithSchema(dataServiceGetMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[data.DeleteRequest, data.DeleteResponse](
			httpClient,
			baseURL+DataServiceDeleteProcedure,
			connect.WithSchema(dataServiceDeleteMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
		append: connect.NewClient[data.AppendRequest, data.AppendResponse](
			httpClient,
			baseURL+DataServiceAppendProcedure,
			connect.WithSchema(dataServiceAppendMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		beginList: connect.NewClient[data.BeginListRequest, data.ListResponse](
			httpClient,
			baseURL+DataServiceBeginListProcedure,
			connect.WithSchema(dataServiceBeginListMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		continueList: connect.NewClient[data.ContinueListRequest, data.ListResponse](
			httpClient,
			baseURL+DataServiceContinueListProcedure,
			connect.WithSchema(dataServiceContinueListMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		syncList: connect.NewClient[data.SyncListRequest, data.SyncListResponse](
			httpClient,
			baseURL+DataServiceSyncListProcedure,
			connect.WithSchema(dataServiceSyncListMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		transaction: connect.NewClient[data.TransactionRequest, data.TransactionResponse](
			httpClient,
			baseURL+DataServiceTransactionProcedure,
			connect.WithSchema(dataServiceTransactionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		scanRootPaths: connect.NewClient[data.ScanRootPathsRequest, data.ScanRootPathsResponse](
			httpClient,
			baseURL+DataServiceScanRootPathsProcedure,
			connect.WithSchema(dataServiceScanRootPathsMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// dataServiceClient implements DataServiceClient.
type dataServiceClient struct {
	put           *connect.Client[data.PutRequest, data.PutResponse]
	get           *connect.Client[data.GetRequest, data.GetResponse]
	delete        *connect.Client[data.DeleteRequest, data.DeleteResponse]
	append        *connect.Client[data.AppendRequest, data.AppendResponse]
	beginList     *connect.Client[data.BeginListRequest, data.ListResponse]
	continueList  *connect.Client[data.ContinueListRequest, data.ListResponse]
	syncList      *connect.Client[data.SyncListRequest, data.SyncListResponse]
	transaction   *connect.Client[data.TransactionRequest, data.TransactionResponse]
	scanRootPaths *connect.Client[data.ScanRootPathsRequest, data.ScanRootPathsResponse]
}

// Put calls stately.data.DataService.Put.
func (c *dataServiceClient) Put(ctx context.Context, req *connect.Request[data.PutRequest]) (*connect.Response[data.PutResponse], error) {
	return c.put.CallUnary(ctx, req)
}

// Get calls stately.data.DataService.Get.
func (c *dataServiceClient) Get(ctx context.Context, req *connect.Request[data.GetRequest]) (*connect.Response[data.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// Delete calls stately.data.DataService.Delete.
func (c *dataServiceClient) Delete(ctx context.Context, req *connect.Request[data.DeleteRequest]) (*connect.Response[data.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// Append calls stately.data.DataService.Append.
func (c *dataServiceClient) Append(ctx context.Context, req *connect.Request[data.AppendRequest]) (*connect.Response[data.AppendResponse], error) {
	return c.append.CallUnary(ctx, req)
}

// BeginList calls stately.data.DataService.BeginList.
func (c *dataServiceClient) BeginList(ctx context.Context, req *connect.Request[data.BeginListRequest]) (*connect.ServerStreamForClient[data.ListResponse], error) {
	return c.beginList.CallServerStream(ctx, req)
}

// ContinueList calls stately.data.DataService.ContinueList.
func (c *dataServiceClient) ContinueList(ctx context.Context, req *connect.Request[data.ContinueListRequest]) (*connect.ServerStreamForClient[data.ListResponse], error) {
	return c.continueList.CallServerStream(ctx, req)
}

// SyncList calls stately.data.DataService.SyncList.
func (c *dataServiceClient) SyncList(ctx context.Context, req *connect.Request[data.SyncListRequest]) (*connect.ServerStreamForClient[data.SyncListResponse], error) {
	return c.syncList.CallServerStream(ctx, req)
}

// Transaction calls stately.data.DataService.Transaction.
func (c *dataServiceClient) Transaction(ctx context.Context) *connect.BidiStreamForClient[data.TransactionRequest, data.TransactionResponse] {
	return c.transaction.CallBidiStream(ctx)
}

// ScanRootPaths calls stately.data.DataService.ScanRootPaths.
func (c *dataServiceClient) ScanRootPaths(ctx context.Context, req *connect.Request[data.ScanRootPathsRequest]) (*connect.Response[data.ScanRootPathsResponse], error) {
	return c.scanRootPaths.CallUnary(ctx, req)
}

// DataServiceHandler is an implementation of the stately.data.DataService service.
type DataServiceHandler interface {
	// Put adds one or more Items to the Store, or replaces the Items if they
	// already exist at that path. This will fail if any of the PutItem requests'
	// write conditions fails, or if the caller does not have permission to create
	// Items. Puts are always applied atomically; all will fail or all will succeed. Data
	// can be provided as either JSON, or as a proto encoded by a previously
	// agreed upon schema, or by some combination of the two.
	Put(context.Context, *connect.Request[data.PutRequest]) (*connect.Response[data.PutResponse], error)
	// Get retrieves one or more Items by their full key paths. This will return
	// any of the Items that exist. It will fail if the caller does not have
	// permission to read Items. Use Query if you want to retrieve multiple items
	// but don't already know the full key paths of the items you want to get.
	Get(context.Context, *connect.Request[data.GetRequest]) (*connect.Response[data.GetResponse], error)
	// Delete removes one or more Items from the Store by their full key paths.
	// This will fail if the caller does not have permission to delete Items. In
	// version-tracking stores, tombstones will be left for deleted items for some
	// predetermined time. Deletes are always applied atomically; all will fail or
	// all will succeed.
	Delete(context.Context, *connect.Request[data.DeleteRequest]) (*connect.Response[data.DeleteResponse], error)
	// Append adds one or more new Items to a parent path, automatically assigning
	// IDs via one of several selectable ID generation strategies (not all
	// strategies may be available to all store configurations or path types).
	// Because the ID is generated by the server, the new item is guaranteed not
	// to overwrite an existing Item. This differs from Put specifically because
	// of this ID assignment behavior, and it is recommended over Put for new
	// items where you do not want to assign IDs yourself. The assigned IDs will
	// be returned in the response. This operation will fail if the caller does
	// not have permission to create Items.
	Append(context.Context, *connect.Request[data.AppendRequest]) (*connect.Response[data.AppendResponse], error)
	// BeginList loads Items that start with a specified key path, subject to
	// additional filtering. The prefix must minimally contain a Group Key (an
	// item type and an item ID). BeginList will return an empty result set if
	// there are no items matching that key prefix. A token is returned from this
	// API that you can then pass to ContinueList to expand the result set, or to
	// SyncList to get updates within the result set. This can fail if the caller
	// does not have permission to read Items.
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	BeginList(context.Context, *connect.Request[data.BeginListRequest], *connect.ServerStream[data.ListResponse]) error
	// ContinueList takes the token from a BeginList call and returns the next
	// "page" of results based on the original query parameters and pagination
	// options. It has few options because it is a continuation of a previous list
	// operation. It will return a new  token which can be used for another
	// ContinueList call, and so on. The  token is the same one used by SyncList -
	// each time you call either ContinueList or SyncList, you should pass the
	// latest version of the token, and then use the new token from the result in
	// subsequent calls. You may interleave ContinueList and SyncList calls
	// however you like, but it does not make sense to make both calls in
	// parallel. Calls to ContinueList are tied to the authorization of the
	// original BeginList call, so if the original BeginList call was allowed,
	// ContinueList with its token should also be allowed.
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	ContinueList(context.Context, *connect.Request[data.ContinueListRequest], *connect.ServerStream[data.ListResponse]) error
	// SyncList returns all changes to Items within the result set of a previous
	// List operation. For all Items within the result set that were modified, it
	// returns the full Item at in its current state. It also returns a list of
	// Item key paths that were deleted since the last SyncList, which you should
	// reconcile with your view of items returned from previous
	// BeginList/ContinueList calls. Using this API, you can start with an initial
	// set of items from BeginList, and then stay up to date on any changes via
	// repeated SyncList requests over time. The token is the same one used by
	// ContinueList - each time you call either ContinueList or SyncList, you
	// should pass the latest version of the token, and then use the new token
	// from the result in subsequent calls. Note that if the result set has
	// already been expanded to the end (in the direction of the original
	// BeginList request), SyncList will return newly created Items. You may
	// interleave ContinueList and SyncList calls however you like, but it does
	// not make sense to make both calls in parallel. Calls to SyncList are tied
	// to the authorization of the original BeginList call, so if the original
	// BeginList call was allowed, SyncList with its token should also be allowed.
	SyncList(context.Context, *connect.Request[data.SyncListRequest], *connect.ServerStream[data.SyncListResponse]) error
	// Transaction performs a transaction, within which you can issue writes and
	// reads in any order, followed by a commit message. Reads are guaranteed to
	// reflect the state as of when the transaction started, and writes are
	// committed atomically. This method may fail if another transaction commits
	// before this one finishes - in that case, you should retry your transaction.
	Transaction(context.Context, *connect.BidiStream[data.TransactionRequest, data.TransactionResponse]) error
	// ScanRootPaths lists root paths (Groups) in the Store, subject to optional
	// filters. This may be a very expensive operation, as it must consult
	// multiple partitions that may be distributed around the world. It is
	// provided mostly for use in the web console's data browser and may not be
	// exposed to customers. This operation will fail if the caller does not have
	// permission to read Items.
	ScanRootPaths(context.Context, *connect.Request[data.ScanRootPathsRequest]) (*connect.Response[data.ScanRootPathsResponse], error)
}

// NewDataServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDataServiceHandler(svc DataServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	dataServicePutHandler := connect.NewUnaryHandler(
		DataServicePutProcedure,
		svc.Put,
		connect.WithSchema(dataServicePutMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	dataServiceGetHandler := connect.NewUnaryHandler(
		DataServiceGetProcedure,
		svc.Get,
		connect.WithSchema(dataServiceGetMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	dataServiceDeleteHandler := connect.NewUnaryHandler(
		DataServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(dataServiceDeleteMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	dataServiceAppendHandler := connect.NewUnaryHandler(
		DataServiceAppendProcedure,
		svc.Append,
		connect.WithSchema(dataServiceAppendMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	dataServiceBeginListHandler := connect.NewServerStreamHandler(
		DataServiceBeginListProcedure,
		svc.BeginList,
		connect.WithSchema(dataServiceBeginListMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	dataServiceContinueListHandler := connect.NewServerStreamHandler(
		DataServiceContinueListProcedure,
		svc.ContinueList,
		connect.WithSchema(dataServiceContinueListMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	dataServiceSyncListHandler := connect.NewServerStreamHandler(
		DataServiceSyncListProcedure,
		svc.SyncList,
		connect.WithSchema(dataServiceSyncListMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	dataServiceTransactionHandler := connect.NewBidiStreamHandler(
		DataServiceTransactionProcedure,
		svc.Transaction,
		connect.WithSchema(dataServiceTransactionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	dataServiceScanRootPathsHandler := connect.NewUnaryHandler(
		DataServiceScanRootPathsProcedure,
		svc.ScanRootPaths,
		connect.WithSchema(dataServiceScanRootPathsMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/stately.data.DataService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DataServicePutProcedure:
			dataServicePutHandler.ServeHTTP(w, r)
		case DataServiceGetProcedure:
			dataServiceGetHandler.ServeHTTP(w, r)
		case DataServiceDeleteProcedure:
			dataServiceDeleteHandler.ServeHTTP(w, r)
		case DataServiceAppendProcedure:
			dataServiceAppendHandler.ServeHTTP(w, r)
		case DataServiceBeginListProcedure:
			dataServiceBeginListHandler.ServeHTTP(w, r)
		case DataServiceContinueListProcedure:
			dataServiceContinueListHandler.ServeHTTP(w, r)
		case DataServiceSyncListProcedure:
			dataServiceSyncListHandler.ServeHTTP(w, r)
		case DataServiceTransactionProcedure:
			dataServiceTransactionHandler.ServeHTTP(w, r)
		case DataServiceScanRootPathsProcedure:
			dataServiceScanRootPathsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDataServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDataServiceHandler struct{}

func (UnimplementedDataServiceHandler) Put(context.Context, *connect.Request[data.PutRequest]) (*connect.Response[data.PutResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stately.data.DataService.Put is not implemented"))
}

func (UnimplementedDataServiceHandler) Get(context.Context, *connect.Request[data.GetRequest]) (*connect.Response[data.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stately.data.DataService.Get is not implemented"))
}

func (UnimplementedDataServiceHandler) Delete(context.Context, *connect.Request[data.DeleteRequest]) (*connect.Response[data.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stately.data.DataService.Delete is not implemented"))
}

func (UnimplementedDataServiceHandler) Append(context.Context, *connect.Request[data.AppendRequest]) (*connect.Response[data.AppendResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stately.data.DataService.Append is not implemented"))
}

func (UnimplementedDataServiceHandler) BeginList(context.Context, *connect.Request[data.BeginListRequest], *connect.ServerStream[data.ListResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("stately.data.DataService.BeginList is not implemented"))
}

func (UnimplementedDataServiceHandler) ContinueList(context.Context, *connect.Request[data.ContinueListRequest], *connect.ServerStream[data.ListResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("stately.data.DataService.ContinueList is not implemented"))
}

func (UnimplementedDataServiceHandler) SyncList(context.Context, *connect.Request[data.SyncListRequest], *connect.ServerStream[data.SyncListResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("stately.data.DataService.SyncList is not implemented"))
}

func (UnimplementedDataServiceHandler) Transaction(context.Context, *connect.BidiStream[data.TransactionRequest, data.TransactionResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("stately.data.DataService.Transaction is not implemented"))
}

func (UnimplementedDataServiceHandler) ScanRootPaths(context.Context, *connect.Request[data.ScanRootPathsRequest]) (*connect.Response[data.ScanRootPathsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stately.data.DataService.ScanRootPaths is not implemented"))
}
