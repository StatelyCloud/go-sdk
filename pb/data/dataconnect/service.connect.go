// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: data/service.proto

package dataconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	data "github.com/StatelyCloud/go-sdk/pb/data"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DataName is the fully-qualified name of the Data service.
	DataName = "stately.Data"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DataPutProcedure is the fully-qualified name of the Data's Put RPC.
	DataPutProcedure = "/stately.Data/Put"
	// DataGetProcedure is the fully-qualified name of the Data's Get RPC.
	DataGetProcedure = "/stately.Data/Get"
	// DataDeleteProcedure is the fully-qualified name of the Data's Delete RPC.
	DataDeleteProcedure = "/stately.Data/Delete"
	// DataAppendProcedure is the fully-qualified name of the Data's Append RPC.
	DataAppendProcedure = "/stately.Data/Append"
	// DataBeginListProcedure is the fully-qualified name of the Data's BeginList RPC.
	DataBeginListProcedure = "/stately.Data/BeginList"
	// DataContinueListProcedure is the fully-qualified name of the Data's ContinueList RPC.
	DataContinueListProcedure = "/stately.Data/ContinueList"
	// DataSyncListProcedure is the fully-qualified name of the Data's SyncList RPC.
	DataSyncListProcedure = "/stately.Data/SyncList"
	// DataTransactionProcedure is the fully-qualified name of the Data's Transaction RPC.
	DataTransactionProcedure = "/stately.Data/Transaction"
	// DataScanRootPathsProcedure is the fully-qualified name of the Data's ScanRootPaths RPC.
	DataScanRootPathsProcedure = "/stately.Data/ScanRootPaths"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	dataServiceDescriptor             = data.File_data_service_proto.Services().ByName("Data")
	dataPutMethodDescriptor           = dataServiceDescriptor.Methods().ByName("Put")
	dataGetMethodDescriptor           = dataServiceDescriptor.Methods().ByName("Get")
	dataDeleteMethodDescriptor        = dataServiceDescriptor.Methods().ByName("Delete")
	dataAppendMethodDescriptor        = dataServiceDescriptor.Methods().ByName("Append")
	dataBeginListMethodDescriptor     = dataServiceDescriptor.Methods().ByName("BeginList")
	dataContinueListMethodDescriptor  = dataServiceDescriptor.Methods().ByName("ContinueList")
	dataSyncListMethodDescriptor      = dataServiceDescriptor.Methods().ByName("SyncList")
	dataTransactionMethodDescriptor   = dataServiceDescriptor.Methods().ByName("Transaction")
	dataScanRootPathsMethodDescriptor = dataServiceDescriptor.Methods().ByName("ScanRootPaths")
)

// DataClient is a client for the stately.Data service.
type DataClient interface {
	// Put adds one or more Items to the Store, or replaces the Items if they
	// already exist at that path. This will fail if any of the PutItem requests'
	// write conditions fails, or if the caller does not have permission to create
	// Items. You may choose whether all puts in the request are applied
	// atomically (in a transaction) or not, though some store configurations may
	// always apply the whole batch in a transaction (such as in version-tracking
	// stores). The status of each Put operation is returned in the response. Data
	// can be provided as either JSON, or as a proto encoded by a previously
	// agreed upon schema, or by some combination of the two.
	Put(context.Context, *connect.Request[data.PutRequest]) (*connect.Response[data.PutResponse], error)
	// Get retrieves one or more Items by their full key paths. This will return
	// any of the Items that exist. It will fail if the caller does not have
	// permission to read Items. Use Query if you want to retrieve multiple items
	// but don't already know the full key paths of the items you want to get.
	Get(context.Context, *connect.Request[data.GetRequest]) (*connect.Response[data.GetResponse], error)
	// Delete removes one or more Items from the Store by their full key paths.
	// This will fail if the caller does not have permission to delete Items. In
	// version-tracking stores, tombstones will be left for deleted items for some
	// predetermined time. You may choose whether all deletes in the request are
	// applied atomically (in a transaction) or not, though some store types may
	// always apply the whole batch in a transaction (such as in version-tracking
	// stores). The status of each Delete operation is returned in the response.
	Delete(context.Context, *connect.Request[data.DeleteRequest]) (*connect.Response[data.DeleteResponse], error)
	// Append adds one or more new Items to a parent path, automatically assigning
	// IDs via one of several selectable ID generation strategies (not all
	// strategies may be available to all store configurations or path types).
	// Because the ID is generated by the server, the new item is guaranteed not
	// to overwrite an existing Item. This differs from Put specifically because
	// of this ID assignment behavior, and it is recommended over Put for new
	// items where you do not want to assign IDs yourself. The assigned IDs will
	// be returned in the response. This operation will fail if the caller does
	// not have permission to create Items.
	Append(context.Context, *connect.Request[data.AppendRequest]) (*connect.Response[data.AppendResponse], error)
	// BeginList loads Items that start with a specified key path, subject to
	// additional filtering. The prefix must minimally contain a Group Key (an
	// item type and an item ID). BeginList will return an empty result set if
	// there are no items matching that key prefix. A token is returned from this
	// API that you can then pass to ContinueList to expand the result set, or to
	// SyncList to get updates within the result set. This can fail if the caller
	// does not have permission to read Items.
	BeginList(context.Context, *connect.Request[data.BeginListRequest]) (*connect.ServerStreamForClient[data.ListResponse], error)
	// ContinueList takes the token from a BeginList call and returns the next
	// "page" of results based on the original query parameters and pagination
	// options. It has few options because it is a continuation of a previous list
	// operation. It will return a new  token which can be used for another
	// ContinueList call, and so on. The  token is the same one used by SyncList -
	// each time you call either ContinueList or SyncList, you should pass the
	// latest version of the token, and then use the new token from the result in
	// subsequent calls. You may interleave ContinueList and SyncList calls
	// however you like, but it does not make sense to make both calls in
	// parallel. Calls to ContinueList are tied to the authorization of the
	// original BeginList call, so if the original BeginList call was allowed,
	// ContinueList with its token should also be allowed.
	ContinueList(context.Context, *connect.Request[data.ContinueListRequest]) (*connect.ServerStreamForClient[data.ListResponse], error)
	// SyncList returns all changes to Items within the result set of a previous
	// List operation. For all Items within the result set that were modified, it
	// returns the full Item at in its current state. It also returns a list of
	// Item key paths that were deleted since the last SyncList, which you should
	// reconcile with your view of items returned from previous
	// BeginList/ContinueList calls. Using this API, you can start with an initial
	// set of items from BeginList, and then stay up to date on any changes via
	// repeated SyncList requests over time. The token is the same one used by
	// ContinueList - each time you call either ContinueList or SyncList, you
	// should pass the latest version of the token, and then use the new token
	// from the result in subsequent calls. Note that if the result set has
	// already been expanded to the end (in the direction of the original
	// BeginList request), SyncList will return newly created Items. You may
	// interleave ContinueList and SyncList calls however you like, but it does
	// not make sense to make both calls in parallel. Calls to SyncList are tied
	// to the authorization of the original BeginList call, so if the original
	// BeginList call was allowed, SyncList with its token should also be allowed.
	SyncList(context.Context, *connect.Request[data.SyncListRequest]) (*connect.ServerStreamForClient[data.SyncListResponse], error)
	// Transaction performs a transaction, within which you can issue writes and
	// reads in any order, followed by a commit message. Reads are guaranteed to
	// reflect the state as of when the transaction started, and writes are
	// committed atomically. This method may fail if another transaction commits
	// before this one finishes - in that case, you should retry your transaction.
	Transaction(context.Context) *connect.BidiStreamForClient[data.TransactionRequest, data.TransactionResponse]
	// ScanRootPaths lists root paths (Groups) in the Store, subject to optional
	// filters. This may be a very expensive operation, as it must consult
	// multiple partitions that may be distributed around the world. It is
	// provided mostly for use in the web console's data browser and may not be
	// exposed to customers. This operation will fail if the caller does not have
	// permission to read Items.
	ScanRootPaths(context.Context, *connect.Request[data.ScanRootPathsRequest]) (*connect.Response[data.ScanRootPathsResponse], error)
}

// NewDataClient constructs a client for the stately.Data service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDataClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DataClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &dataClient{
		put: connect.NewClient[data.PutRequest, data.PutResponse](
			httpClient,
			baseURL+DataPutProcedure,
			connect.WithSchema(dataPutMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[data.GetRequest, data.GetResponse](
			httpClient,
			baseURL+DataGetProcedure,
			connect.WithSchema(dataGetMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[data.DeleteRequest, data.DeleteResponse](
			httpClient,
			baseURL+DataDeleteProcedure,
			connect.WithSchema(dataDeleteMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
		append: connect.NewClient[data.AppendRequest, data.AppendResponse](
			httpClient,
			baseURL+DataAppendProcedure,
			connect.WithSchema(dataAppendMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		beginList: connect.NewClient[data.BeginListRequest, data.ListResponse](
			httpClient,
			baseURL+DataBeginListProcedure,
			connect.WithSchema(dataBeginListMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		continueList: connect.NewClient[data.ContinueListRequest, data.ListResponse](
			httpClient,
			baseURL+DataContinueListProcedure,
			connect.WithSchema(dataContinueListMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		syncList: connect.NewClient[data.SyncListRequest, data.SyncListResponse](
			httpClient,
			baseURL+DataSyncListProcedure,
			connect.WithSchema(dataSyncListMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		transaction: connect.NewClient[data.TransactionRequest, data.TransactionResponse](
			httpClient,
			baseURL+DataTransactionProcedure,
			connect.WithSchema(dataTransactionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		scanRootPaths: connect.NewClient[data.ScanRootPathsRequest, data.ScanRootPathsResponse](
			httpClient,
			baseURL+DataScanRootPathsProcedure,
			connect.WithSchema(dataScanRootPathsMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// dataClient implements DataClient.
type dataClient struct {
	put           *connect.Client[data.PutRequest, data.PutResponse]
	get           *connect.Client[data.GetRequest, data.GetResponse]
	delete        *connect.Client[data.DeleteRequest, data.DeleteResponse]
	append        *connect.Client[data.AppendRequest, data.AppendResponse]
	beginList     *connect.Client[data.BeginListRequest, data.ListResponse]
	continueList  *connect.Client[data.ContinueListRequest, data.ListResponse]
	syncList      *connect.Client[data.SyncListRequest, data.SyncListResponse]
	transaction   *connect.Client[data.TransactionRequest, data.TransactionResponse]
	scanRootPaths *connect.Client[data.ScanRootPathsRequest, data.ScanRootPathsResponse]
}

// Put calls stately.Data.Put.
func (c *dataClient) Put(ctx context.Context, req *connect.Request[data.PutRequest]) (*connect.Response[data.PutResponse], error) {
	return c.put.CallUnary(ctx, req)
}

// Get calls stately.Data.Get.
func (c *dataClient) Get(ctx context.Context, req *connect.Request[data.GetRequest]) (*connect.Response[data.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// Delete calls stately.Data.Delete.
func (c *dataClient) Delete(ctx context.Context, req *connect.Request[data.DeleteRequest]) (*connect.Response[data.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// Append calls stately.Data.Append.
func (c *dataClient) Append(ctx context.Context, req *connect.Request[data.AppendRequest]) (*connect.Response[data.AppendResponse], error) {
	return c.append.CallUnary(ctx, req)
}

// BeginList calls stately.Data.BeginList.
func (c *dataClient) BeginList(ctx context.Context, req *connect.Request[data.BeginListRequest]) (*connect.ServerStreamForClient[data.ListResponse], error) {
	return c.beginList.CallServerStream(ctx, req)
}

// ContinueList calls stately.Data.ContinueList.
func (c *dataClient) ContinueList(ctx context.Context, req *connect.Request[data.ContinueListRequest]) (*connect.ServerStreamForClient[data.ListResponse], error) {
	return c.continueList.CallServerStream(ctx, req)
}

// SyncList calls stately.Data.SyncList.
func (c *dataClient) SyncList(ctx context.Context, req *connect.Request[data.SyncListRequest]) (*connect.ServerStreamForClient[data.SyncListResponse], error) {
	return c.syncList.CallServerStream(ctx, req)
}

// Transaction calls stately.Data.Transaction.
func (c *dataClient) Transaction(ctx context.Context) *connect.BidiStreamForClient[data.TransactionRequest, data.TransactionResponse] {
	return c.transaction.CallBidiStream(ctx)
}

// ScanRootPaths calls stately.Data.ScanRootPaths.
func (c *dataClient) ScanRootPaths(ctx context.Context, req *connect.Request[data.ScanRootPathsRequest]) (*connect.Response[data.ScanRootPathsResponse], error) {
	return c.scanRootPaths.CallUnary(ctx, req)
}

// DataHandler is an implementation of the stately.Data service.
type DataHandler interface {
	// Put adds one or more Items to the Store, or replaces the Items if they
	// already exist at that path. This will fail if any of the PutItem requests'
	// write conditions fails, or if the caller does not have permission to create
	// Items. You may choose whether all puts in the request are applied
	// atomically (in a transaction) or not, though some store configurations may
	// always apply the whole batch in a transaction (such as in version-tracking
	// stores). The status of each Put operation is returned in the response. Data
	// can be provided as either JSON, or as a proto encoded by a previously
	// agreed upon schema, or by some combination of the two.
	Put(context.Context, *connect.Request[data.PutRequest]) (*connect.Response[data.PutResponse], error)
	// Get retrieves one or more Items by their full key paths. This will return
	// any of the Items that exist. It will fail if the caller does not have
	// permission to read Items. Use Query if you want to retrieve multiple items
	// but don't already know the full key paths of the items you want to get.
	Get(context.Context, *connect.Request[data.GetRequest]) (*connect.Response[data.GetResponse], error)
	// Delete removes one or more Items from the Store by their full key paths.
	// This will fail if the caller does not have permission to delete Items. In
	// version-tracking stores, tombstones will be left for deleted items for some
	// predetermined time. You may choose whether all deletes in the request are
	// applied atomically (in a transaction) or not, though some store types may
	// always apply the whole batch in a transaction (such as in version-tracking
	// stores). The status of each Delete operation is returned in the response.
	Delete(context.Context, *connect.Request[data.DeleteRequest]) (*connect.Response[data.DeleteResponse], error)
	// Append adds one or more new Items to a parent path, automatically assigning
	// IDs via one of several selectable ID generation strategies (not all
	// strategies may be available to all store configurations or path types).
	// Because the ID is generated by the server, the new item is guaranteed not
	// to overwrite an existing Item. This differs from Put specifically because
	// of this ID assignment behavior, and it is recommended over Put for new
	// items where you do not want to assign IDs yourself. The assigned IDs will
	// be returned in the response. This operation will fail if the caller does
	// not have permission to create Items.
	Append(context.Context, *connect.Request[data.AppendRequest]) (*connect.Response[data.AppendResponse], error)
	// BeginList loads Items that start with a specified key path, subject to
	// additional filtering. The prefix must minimally contain a Group Key (an
	// item type and an item ID). BeginList will return an empty result set if
	// there are no items matching that key prefix. A token is returned from this
	// API that you can then pass to ContinueList to expand the result set, or to
	// SyncList to get updates within the result set. This can fail if the caller
	// does not have permission to read Items.
	BeginList(context.Context, *connect.Request[data.BeginListRequest], *connect.ServerStream[data.ListResponse]) error
	// ContinueList takes the token from a BeginList call and returns the next
	// "page" of results based on the original query parameters and pagination
	// options. It has few options because it is a continuation of a previous list
	// operation. It will return a new  token which can be used for another
	// ContinueList call, and so on. The  token is the same one used by SyncList -
	// each time you call either ContinueList or SyncList, you should pass the
	// latest version of the token, and then use the new token from the result in
	// subsequent calls. You may interleave ContinueList and SyncList calls
	// however you like, but it does not make sense to make both calls in
	// parallel. Calls to ContinueList are tied to the authorization of the
	// original BeginList call, so if the original BeginList call was allowed,
	// ContinueList with its token should also be allowed.
	ContinueList(context.Context, *connect.Request[data.ContinueListRequest], *connect.ServerStream[data.ListResponse]) error
	// SyncList returns all changes to Items within the result set of a previous
	// List operation. For all Items within the result set that were modified, it
	// returns the full Item at in its current state. It also returns a list of
	// Item key paths that were deleted since the last SyncList, which you should
	// reconcile with your view of items returned from previous
	// BeginList/ContinueList calls. Using this API, you can start with an initial
	// set of items from BeginList, and then stay up to date on any changes via
	// repeated SyncList requests over time. The token is the same one used by
	// ContinueList - each time you call either ContinueList or SyncList, you
	// should pass the latest version of the token, and then use the new token
	// from the result in subsequent calls. Note that if the result set has
	// already been expanded to the end (in the direction of the original
	// BeginList request), SyncList will return newly created Items. You may
	// interleave ContinueList and SyncList calls however you like, but it does
	// not make sense to make both calls in parallel. Calls to SyncList are tied
	// to the authorization of the original BeginList call, so if the original
	// BeginList call was allowed, SyncList with its token should also be allowed.
	SyncList(context.Context, *connect.Request[data.SyncListRequest], *connect.ServerStream[data.SyncListResponse]) error
	// Transaction performs a transaction, within which you can issue writes and
	// reads in any order, followed by a commit message. Reads are guaranteed to
	// reflect the state as of when the transaction started, and writes are
	// committed atomically. This method may fail if another transaction commits
	// before this one finishes - in that case, you should retry your transaction.
	Transaction(context.Context, *connect.BidiStream[data.TransactionRequest, data.TransactionResponse]) error
	// ScanRootPaths lists root paths (Groups) in the Store, subject to optional
	// filters. This may be a very expensive operation, as it must consult
	// multiple partitions that may be distributed around the world. It is
	// provided mostly for use in the web console's data browser and may not be
	// exposed to customers. This operation will fail if the caller does not have
	// permission to read Items.
	ScanRootPaths(context.Context, *connect.Request[data.ScanRootPathsRequest]) (*connect.Response[data.ScanRootPathsResponse], error)
}

// NewDataHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDataHandler(svc DataHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	dataPutHandler := connect.NewUnaryHandler(
		DataPutProcedure,
		svc.Put,
		connect.WithSchema(dataPutMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	dataGetHandler := connect.NewUnaryHandler(
		DataGetProcedure,
		svc.Get,
		connect.WithSchema(dataGetMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	dataDeleteHandler := connect.NewUnaryHandler(
		DataDeleteProcedure,
		svc.Delete,
		connect.WithSchema(dataDeleteMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	dataAppendHandler := connect.NewUnaryHandler(
		DataAppendProcedure,
		svc.Append,
		connect.WithSchema(dataAppendMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	dataBeginListHandler := connect.NewServerStreamHandler(
		DataBeginListProcedure,
		svc.BeginList,
		connect.WithSchema(dataBeginListMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	dataContinueListHandler := connect.NewServerStreamHandler(
		DataContinueListProcedure,
		svc.ContinueList,
		connect.WithSchema(dataContinueListMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	dataSyncListHandler := connect.NewServerStreamHandler(
		DataSyncListProcedure,
		svc.SyncList,
		connect.WithSchema(dataSyncListMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	dataTransactionHandler := connect.NewBidiStreamHandler(
		DataTransactionProcedure,
		svc.Transaction,
		connect.WithSchema(dataTransactionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	dataScanRootPathsHandler := connect.NewUnaryHandler(
		DataScanRootPathsProcedure,
		svc.ScanRootPaths,
		connect.WithSchema(dataScanRootPathsMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/stately.Data/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DataPutProcedure:
			dataPutHandler.ServeHTTP(w, r)
		case DataGetProcedure:
			dataGetHandler.ServeHTTP(w, r)
		case DataDeleteProcedure:
			dataDeleteHandler.ServeHTTP(w, r)
		case DataAppendProcedure:
			dataAppendHandler.ServeHTTP(w, r)
		case DataBeginListProcedure:
			dataBeginListHandler.ServeHTTP(w, r)
		case DataContinueListProcedure:
			dataContinueListHandler.ServeHTTP(w, r)
		case DataSyncListProcedure:
			dataSyncListHandler.ServeHTTP(w, r)
		case DataTransactionProcedure:
			dataTransactionHandler.ServeHTTP(w, r)
		case DataScanRootPathsProcedure:
			dataScanRootPathsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDataHandler returns CodeUnimplemented from all methods.
type UnimplementedDataHandler struct{}

func (UnimplementedDataHandler) Put(context.Context, *connect.Request[data.PutRequest]) (*connect.Response[data.PutResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stately.Data.Put is not implemented"))
}

func (UnimplementedDataHandler) Get(context.Context, *connect.Request[data.GetRequest]) (*connect.Response[data.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stately.Data.Get is not implemented"))
}

func (UnimplementedDataHandler) Delete(context.Context, *connect.Request[data.DeleteRequest]) (*connect.Response[data.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stately.Data.Delete is not implemented"))
}

func (UnimplementedDataHandler) Append(context.Context, *connect.Request[data.AppendRequest]) (*connect.Response[data.AppendResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stately.Data.Append is not implemented"))
}

func (UnimplementedDataHandler) BeginList(context.Context, *connect.Request[data.BeginListRequest], *connect.ServerStream[data.ListResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("stately.Data.BeginList is not implemented"))
}

func (UnimplementedDataHandler) ContinueList(context.Context, *connect.Request[data.ContinueListRequest], *connect.ServerStream[data.ListResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("stately.Data.ContinueList is not implemented"))
}

func (UnimplementedDataHandler) SyncList(context.Context, *connect.Request[data.SyncListRequest], *connect.ServerStream[data.SyncListResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("stately.Data.SyncList is not implemented"))
}

func (UnimplementedDataHandler) Transaction(context.Context, *connect.BidiStream[data.TransactionRequest, data.TransactionResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("stately.Data.Transaction is not implemented"))
}

func (UnimplementedDataHandler) ScanRootPaths(context.Context, *connect.Request[data.ScanRootPathsRequest]) (*connect.Response[data.ScanRootPathsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stately.Data.ScanRootPaths is not implemented"))
}
