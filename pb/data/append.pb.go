// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: data/append.proto

package data

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AppendItem_IDAssignment int32

const (
	AppendItem_ID_ASSIGNMENT_UNSPECIFIED AppendItem_IDAssignment = 0
	// SEQUENCE will assign the item a monotonically increasing, contiguous ID
	// that is unique *within the parent path and item type*. This is only valid
	// for non-root item.
	AppendItem_SEQUENCE AppendItem_IDAssignment = 1
	// UUID will assign the item a globally unique 128-bit UUID. This will be
	// encoded in the item key path as a binary ID. This is usable anywhere, in
	// any store config.
	AppendItem_UUID AppendItem_IDAssignment = 2
	// RAND53 will assign the item a random 53-bit numeric ID that
	// is unique *within the parent path and item type*, but is not globally
	// unique. This is usable anywhere, in any store config. We use 53 bits
	// instead of 64 because 53 bits is still a lot of bits, and it's the largest
	// integer that can be represented exactly in JavaScript.
	AppendItem_RAND53 AppendItem_IDAssignment = 3
)

// Enum value maps for AppendItem_IDAssignment.
var (
	AppendItem_IDAssignment_name = map[int32]string{
		0: "ID_ASSIGNMENT_UNSPECIFIED",
		1: "SEQUENCE",
		2: "UUID",
		3: "RAND53",
	}
	AppendItem_IDAssignment_value = map[string]int32{
		"ID_ASSIGNMENT_UNSPECIFIED": 0,
		"SEQUENCE":                  1,
		"UUID":                      2,
		"RAND53":                    3,
	}
)

func (x AppendItem_IDAssignment) Enum() *AppendItem_IDAssignment {
	p := new(AppendItem_IDAssignment)
	*p = x
	return p
}

func (x AppendItem_IDAssignment) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppendItem_IDAssignment) Descriptor() protoreflect.EnumDescriptor {
	return file_data_append_proto_enumTypes[0].Descriptor()
}

func (AppendItem_IDAssignment) Type() protoreflect.EnumType {
	return &file_data_append_proto_enumTypes[0]
}

func (x AppendItem_IDAssignment) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppendItem_IDAssignment.Descriptor instead.
func (AppendItem_IDAssignment) EnumDescriptor() ([]byte, []int) {
	return file_data_append_proto_rawDescGZIP(), []int{1, 0}
}

type AppendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// store_id is a globally unique Store ID, which can be looked up from the
	// console or CLI.
	StoreId uint64 `protobuf:"varint,1,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty"`
	// parent_path is the full path, in the form
	// /item_type-item_id/[{sub_item_type}-{sub_item_id}...}], under which each
	// item will be appended. The item will be appended as a direct child of this
	// path. Note that the path *may* be "/" to create root-level items, though
	// some ID assignment options may not be available in that case.
	ParentPath string `protobuf:"bytes,2,opt,name=parent_path,json=parentPath,proto3" json:"parent_path,omitempty"`
	// appends is one or more items to be appended under the parent path.
	Appends []*AppendItem `protobuf:"bytes,3,rep,name=appends,proto3" json:"appends,omitempty"`
}

func (x *AppendRequest) Reset() {
	*x = AppendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_append_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendRequest) ProtoMessage() {}

func (x *AppendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_append_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendRequest.ProtoReflect.Descriptor instead.
func (*AppendRequest) Descriptor() ([]byte, []int) {
	return file_data_append_proto_rawDescGZIP(), []int{0}
}

func (x *AppendRequest) GetStoreId() uint64 {
	if x != nil {
		return x.StoreId
	}
	return 0
}

func (x *AppendRequest) GetParentPath() string {
	if x != nil {
		return x.ParentPath
	}
	return ""
}

func (x *AppendRequest) GetAppends() []*AppendItem {
	if x != nil {
		return x.Appends
	}
	return nil
}

// AppendItem is the payload to be appended. This is mostly a copy of Item
// except we have a parent_key_path and item_type, but no item ID, since the resulting full key_path is determined by the
// parent_key_path plus an auto-assigned ID.
type AppendItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// item_type is the type of item to be appended. All items must have a type.
	ItemType string `protobuf:"bytes,1,opt,name=item_type,json=itemType,proto3" json:"item_type,omitempty"`
	// id_assignment chooses how the item's ID will be assigned. Not all options
	// are applicable for all types of items or store configurations.
	IdAssignment AppendItem_IDAssignment `protobuf:"varint,2,opt,name=id_assignment,json=idAssignment,proto3,enum=stately.data.AppendItem_IDAssignment" json:"id_assignment,omitempty"`
	// json is a proto-encoded JSON object, to support storing JSON documents, or
	// to support storing the remainder of data that cannot be represented as
	// proto.
	// TODO: We may want to replace this with something a bit more powerful such
	// as BSON - still a map of string key to value, but with a larger vocabulary
	// of value types.
	Json *structpb.Struct `protobuf:"bytes,3,opt,name=json,proto3" json:"json,omitempty"`
	// proto is an arbitrary binary proto message, following the schema for this
	// item type (TBD). It is entirely possible for an item to store both proto
	// data AND json data - for example, if only a subset of its data has a
	// defined proto schema that informs its representation. We don't use the Any
	// type here because it is both inefficient (it encodes the entire type name
	// as a string), but also we should know via external schema what type of
	// proto this is.
	Proto []byte `protobuf:"bytes,4,opt,name=proto,proto3" json:"proto,omitempty"`
}

func (x *AppendItem) Reset() {
	*x = AppendItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_append_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppendItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendItem) ProtoMessage() {}

func (x *AppendItem) ProtoReflect() protoreflect.Message {
	mi := &file_data_append_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendItem.ProtoReflect.Descriptor instead.
func (*AppendItem) Descriptor() ([]byte, []int) {
	return file_data_append_proto_rawDescGZIP(), []int{1}
}

func (x *AppendItem) GetItemType() string {
	if x != nil {
		return x.ItemType
	}
	return ""
}

func (x *AppendItem) GetIdAssignment() AppendItem_IDAssignment {
	if x != nil {
		return x.IdAssignment
	}
	return AppendItem_ID_ASSIGNMENT_UNSPECIFIED
}

func (x *AppendItem) GetJson() *structpb.Struct {
	if x != nil {
		return x.Json
	}
	return nil
}

func (x *AppendItem) GetProto() []byte {
	if x != nil {
		return x.Proto
	}
	return nil
}

type AppendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// results are in the same order as the appends in the request, one per append.
	Results []*AppendItemResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *AppendResponse) Reset() {
	*x = AppendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_append_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendResponse) ProtoMessage() {}

func (x *AppendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_append_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendResponse.ProtoReflect.Descriptor instead.
func (*AppendResponse) Descriptor() ([]byte, []int) {
	return file_data_append_proto_rawDescGZIP(), []int{2}
}

func (x *AppendResponse) GetResults() []*AppendItemResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type AppendItemResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key_path is the full path to the newly appended item, if it was able to be
	// saved. See Item#key_path for more details.
	KeyPath string `protobuf:"bytes,1,opt,name=key_path,json=keyPath,proto3" json:"key_path,omitempty"`
	// metadata is the version and timestamp metadata for the item that was appended.
	Metadata *ItemMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *AppendItemResult) Reset() {
	*x = AppendItemResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_append_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppendItemResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendItemResult) ProtoMessage() {}

func (x *AppendItemResult) ProtoReflect() protoreflect.Message {
	mi := &file_data_append_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendItemResult.ProtoReflect.Descriptor instead.
func (*AppendItemResult) Descriptor() ([]byte, []int) {
	return file_data_append_proto_rawDescGZIP(), []int{3}
}

func (x *AppendItemResult) GetKeyPath() string {
	if x != nil {
		return x.KeyPath
	}
	return ""
}

func (x *AppendItemResult) GetMetadata() *ItemMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

var File_data_append_proto protoreflect.FileDescriptor

var file_data_append_proto_rawDesc = []byte{
	0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f,
	0x64, 0x61, 0x74, 0x61, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9d, 0x01,
	0x0a, 0x0d, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3a, 0x0a, 0x07, 0x61,
	0x70, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x70, 0x70, 0x65,
	0x6e, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07,
	0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0x9b, 0x02,
	0x0a, 0x0a, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x23, 0x0a, 0x09,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x52, 0x0a, 0x0d, 0x69, 0x64, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x6c, 0x79, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x49, 0x74,
	0x65, 0x6d, 0x2e, 0x49, 0x44, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0c, 0x69, 0x64, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x6a, 0x73,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x51, 0x0a, 0x0c, 0x49, 0x44, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x44, 0x5f, 0x41,
	0x53, 0x53, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x45, 0x51, 0x55, 0x45,
	0x4e, 0x43, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x44, 0x35, 0x33, 0x10, 0x03, 0x22, 0x57, 0x0a, 0x0e, 0x41,
	0x70, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x70,
	0x70, 0x65, 0x6e, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x0b,
	0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x92, 0x01, 0x02, 0x10, 0x10, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x22, 0x6b, 0x0a, 0x10, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4a, 0x04, 0x08, 0x02, 0x10,
	0x03, 0x42, 0x98, 0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6c,
	0x79, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0b, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67,
	0x6f, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x62, 0x2f, 0x64, 0x61, 0x74, 0x61, 0xa2, 0x02, 0x03,
	0x53, 0x44, 0x58, 0xaa, 0x02, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0xca, 0x02, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x5c, 0x44, 0x61, 0x74,
	0x61, 0xe2, 0x02, 0x18, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x5c, 0x44, 0x61, 0x74, 0x61,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0d, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x3a, 0x3a, 0x44, 0x61, 0x74, 0x61, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_data_append_proto_rawDescOnce sync.Once
	file_data_append_proto_rawDescData = file_data_append_proto_rawDesc
)

func file_data_append_proto_rawDescGZIP() []byte {
	file_data_append_proto_rawDescOnce.Do(func() {
		file_data_append_proto_rawDescData = protoimpl.X.CompressGZIP(file_data_append_proto_rawDescData)
	})
	return file_data_append_proto_rawDescData
}

var file_data_append_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_data_append_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_data_append_proto_goTypes = []interface{}{
	(AppendItem_IDAssignment)(0), // 0: stately.data.AppendItem.IDAssignment
	(*AppendRequest)(nil),        // 1: stately.data.AppendRequest
	(*AppendItem)(nil),           // 2: stately.data.AppendItem
	(*AppendResponse)(nil),       // 3: stately.data.AppendResponse
	(*AppendItemResult)(nil),     // 4: stately.data.AppendItemResult
	(*structpb.Struct)(nil),      // 5: google.protobuf.Struct
	(*ItemMetadata)(nil),         // 6: stately.data.ItemMetadata
}
var file_data_append_proto_depIdxs = []int32{
	2, // 0: stately.data.AppendRequest.appends:type_name -> stately.data.AppendItem
	0, // 1: stately.data.AppendItem.id_assignment:type_name -> stately.data.AppendItem.IDAssignment
	5, // 2: stately.data.AppendItem.json:type_name -> google.protobuf.Struct
	4, // 3: stately.data.AppendResponse.results:type_name -> stately.data.AppendItemResult
	6, // 4: stately.data.AppendItemResult.metadata:type_name -> stately.data.ItemMetadata
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_data_append_proto_init() }
func file_data_append_proto_init() {
	if File_data_append_proto != nil {
		return
	}
	file_data_item_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_data_append_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_append_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppendItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_append_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_append_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppendItemResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_data_append_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_data_append_proto_goTypes,
		DependencyIndexes: file_data_append_proto_depIdxs,
		EnumInfos:         file_data_append_proto_enumTypes,
		MessageInfos:      file_data_append_proto_msgTypes,
	}.Build()
	File_data_append_proto = out.File
	file_data_append_proto_rawDesc = nil
	file_data_append_proto_goTypes = nil
	file_data_append_proto_depIdxs = nil
}
