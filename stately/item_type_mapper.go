package stately

import (
	"google.golang.org/protobuf/types/known/structpb"

	"github.com/StatelyCloud/go-sdk/pb/db"
)

// JSONItem allows for sending and receiving data as JSON in the StatelyDB.
// The JSON data must still conform to the backing schema of your specific
// StatelyDB store.
//
// JSONItem is not a typical use case as you should use the item types
// generated by the Stately CLI code generator.
type JSONItem struct {
	// ItemType allows you + Stately to know "which" item in your schema you are working
	// with. For example, if you have a schema with "User" and "Post", ItemType
	// would be "User" or "Post".
	//
	// For Get/List operations, this field is set automatically.
	// For Put operations, you must set this field specifically to the schema
	// type you are working with.
	ItemType string

	// Data is the JSON data for the item.
	// This data must conform to the item type in the schema of your StatelyDB
	// store. If it doesn't you'll get an error when you try to Put the item.
	Data *structpb.Struct
}

// JSONItemMapper should be used when you want to work with JSON data in your
// StatelyDB store. This is not a typical use case as you should use the item
// types generated by the Stately CLI code generator.
// See NewJSONClient for an example of how to use this.
func JSONItemMapper(item *db.Item) (Item, error) {
	return &JSONItem{
		ItemType: item.GetItemType(),
		Data:     item.GetJson(),
	}, nil
}

// StatelyItemType is internally used by the Stately SDK to determine the type
// of the item.
func (j *JSONItem) StatelyItemType() string {
	return j.ItemType
}

// UnmarshalStately is internally used by the Stately SDK to handle data
// coming off the wire.
func (j *JSONItem) UnmarshalStately(item *db.Item) error {
	j.Data = item.GetJson()
	j.ItemType = item.GetItemType()
	return nil
}

// MarshalStately is internally used by the Stately SDK to handle data
// going over the wire.
func (j *JSONItem) MarshalStately() (*db.Item, error) {
	return &db.Item{
		ItemType: j.ItemType,
		Payload: &db.Item_Json{
			Json: j.Data,
		},
	}, nil
}

// KeyPath is part of the Stately Item interface; however it is not used for
// JSON items. This will return an empty string.
func (j *JSONItem) KeyPath() string {
	return ""
}
